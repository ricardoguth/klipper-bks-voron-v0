2024-03-19 09:12:57,817 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-03-19 09:12:57,818 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a0
2024-03-19 09:12:57,818 [functions.py:log_start()] - Python version: 3.9
2024-03-19 09:12:59,094 [config.py:get_config_file_location()] - Passed config (-c): .
2024-03-19 09:12:59,098 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-03-19 09:12:59,117 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-03-19 09:12:59,256 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-03-19 09:12:59,256 [config.py:install_language()] - Using lang en
2024-03-19 09:12:59,348 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-03-19 09:12:59,351 [screen.py:__init__()] - Wayland: False Display name: :0
2024-03-19 09:12:59,355 [screen.py:__init__()] - Screen resolution: 1024x768
2024-03-19 09:12:59,359 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-03-19 09:13:13,939 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-03-19 09:13:13,955 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-03-19 09:13:13,965 [screen.py:initial_connection()] - Default printer: None
2024-03-19 09:13:14,040 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-03-19 09:13:14,041 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-03-19 09:13:14,171 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-03-19 09:13:14,185 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-03-19 09:13:14,185 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 09:13:14,278 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-03-19 09:13:14,297 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-03-19 09:13:14,313 [_logging.py:info()] - Websocket connected
2024-03-19 09:13:14,314 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-03-19 09:13:14,351 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 09:13:14,370 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-03-19 09:13:14,446 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-03-19 09:13:14,464 [printer.py:configure_cameras()] - Cameras: []
2024-03-19 09:13:14,464 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-19 09:13:14,465 [screen.py:init_klipper()] - Klipper not connected
2024-03-19 09:13:17,723 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 09:13:17,741 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-19 09:13:17,741 [screen.py:init_klipper()] - Klipper not connected
2024-03-19 09:13:20,720 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-03-19 09:13:20,738 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-03-19 09:13:20,739 [screen.py:init_klipper()] - Klipper not connected
2024-11-07 01:19:23,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:19:23,343 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:19:23,344 [screen.py:init_klipper()] - Klipper not connected
2024-11-07 01:19:26,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:19:26,346 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:19:26,346 [screen.py:init_klipper()] - Klipper not connected
2024-11-07 01:19:29,327 [screen.py:init_klipper()] - Stopping Retries
2024-11-07 01:25:50,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:25:50,344 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:25:50,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:25:50,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:25:50,427 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': 'PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:25:50,429 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:25:50,429 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:25:50,430 [printer.py:reinit()] - # Extruders: 1
2024-11-07 01:25:50,430 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 01:25:50,430 [printer.py:reinit()] - # Fans: 1
2024-11-07 01:25:50,431 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:25:50,431 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:25:50,431 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:25:50,455 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:25:50,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&fan
2024-11-07 01:25:50,720 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:25:50,720 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:25:50,721 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-07 01:25:50,721 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 01:25:50,723 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 01:25:50,728 [screen.py:_load_panel()] - Loading panel: main_menu
2024-11-07 01:25:50,875 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 01:25:50,885 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 01:25:50,929 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 01:25:50,931 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 01:25:50,957 [printer.py:init_temp_store()] - Temp store: ['extruder']
2024-11-07 01:25:50,959 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 01:25:50,979 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 01:27:01,562 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 01:27:01,562 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:27:01,563 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:27:01,564 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:27:01,568 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:27:01,633 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:27:05,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:27:05,372 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:27:05,391 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:27:05,432 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:27:05,432 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:27:05,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:27:05,454 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:27:05,481 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:27:05,482 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:27:05,482 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:27:05,483 [printer.py:reinit()] - # Extruders: 0
2024-11-07 01:27:05,483 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 01:27:05,483 [printer.py:reinit()] - # Fans: 0
2024-11-07 01:27:05,483 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:27:05,483 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:27:05,484 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:27:05,505 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:27:05,507 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-07 01:27:05,738 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:27:05,739 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:27:05,739 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 01:27:05,740 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 01:27:05,848 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:27:05,915 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:27:18,030 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 01:27:18,031 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:27:18,032 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:27:18,032 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:27:18,035 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:27:18,100 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:27:21,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:27:21,359 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:27:21,371 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:27:21,398 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:27:21,399 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:27:21,400 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:27:21,432 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:27:21,704 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:27:21,704 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:27:21,705 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:27:21,705 [printer.py:reinit()] - # Extruders: 0
2024-11-07 01:27:21,705 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 01:27:21,705 [printer.py:reinit()] - # Fans: 0
2024-11-07 01:27:21,706 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:27:21,706 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:27:21,706 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:27:21,728 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:27:21,730 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-07 01:27:21,961 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:27:21,961 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:27:21,962 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 01:27:21,962 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 01:27:22,082 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:27:22,149 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:27:30,773 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 01:27:30,774 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:27:30,775 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:27:30,776 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:27:30,778 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:27:30,844 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:27:34,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:27:34,349 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:27:34,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:27:34,375 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:27:34,376 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:27:34,376 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:27:34,397 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:27:34,440 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:27:34,441 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:27:34,441 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:27:34,442 [printer.py:reinit()] - # Extruders: 0
2024-11-07 01:27:34,442 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 01:27:34,442 [printer.py:reinit()] - # Fans: 0
2024-11-07 01:27:34,442 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:27:34,443 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:27:34,443 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:27:34,465 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:27:34,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-07 01:27:34,716 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:27:34,717 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:27:34,718 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 01:27:34,718 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 01:27:34,882 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:27:34,949 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:27:47,116 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 01:27:47,117 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:27:47,120 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:27:47,120 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:27:47,123 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:27:47,189 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:27:50,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:27:50,348 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:27:50,357 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:27:50,376 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:27:50,377 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:27:50,377 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:27:50,399 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:27:50,427 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': 'PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8'}, 'temperature_fan raspberry_pi': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan raspberry_pi': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:27:50,429 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:27:50,430 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:27:50,430 [printer.py:reinit()] - # Extruders: 1
2024-11-07 01:27:50,430 [printer.py:reinit()] - # Temperature devices: 1
2024-11-07 01:27:50,430 [printer.py:reinit()] - # Fans: 1
2024-11-07 01:27:50,431 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:27:50,431 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:27:50,431 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:27:50,454 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:27:50,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&fan&temperature_fan raspberry_pi
2024-11-07 01:27:50,717 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:27:50,717 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:27:50,718 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 01:27:50,718 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 01:27:50,845 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:27:50,934 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:28:49,980 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 01:28:49,980 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:28:49,981 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:28:49,981 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:28:49,984 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:28:50,050 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:28:53,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:28:53,349 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:28:53,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:28:53,376 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:28:53,377 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:28:53,377 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:28:53,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:28:53,425 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': 'PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8'}, 'temperature_fan raspberry_pi': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan raspberry_pi': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:28:53,427 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:28:53,428 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:28:53,429 [printer.py:reinit()] - # Extruders: 1
2024-11-07 01:28:53,429 [printer.py:reinit()] - # Temperature devices: 1
2024-11-07 01:28:53,429 [printer.py:reinit()] - # Fans: 1
2024-11-07 01:28:53,429 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:28:53,429 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:28:53,430 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:28:53,455 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:28:53,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&fan&temperature_fan raspberry_pi
2024-11-07 01:28:53,694 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:28:53,695 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:28:53,696 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 01:28:53,696 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 01:28:53,878 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:28:53,980 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:29:22,137 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 01:29:22,137 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:29:22,139 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:29:22,139 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:29:22,141 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:29:22,208 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:29:25,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:29:25,351 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:29:25,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:29:25,379 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:29:25,380 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:29:25,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:29:25,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:29:25,432 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': 'PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:29:25,435 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:29:25,436 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:29:25,436 [printer.py:reinit()] - # Extruders: 1
2024-11-07 01:29:25,436 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 01:29:25,437 [printer.py:reinit()] - # Fans: 1
2024-11-07 01:29:25,437 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:29:25,437 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:29:25,437 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:29:25,462 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:29:25,465 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&fan
2024-11-07 01:29:25,716 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:29:25,717 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:29:25,717 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-07 01:29:25,718 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 01:29:25,836 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 01:29:25,841 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:29:25,957 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 01:29:25,967 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 01:29:26,008 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 01:29:26,009 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 01:29:26,035 [printer.py:init_temp_store()] - Temp store: ['extruder']
2024-11-07 01:29:26,038 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 01:29:26,058 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 01:29:37,363 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 01:29:37,363 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:29:37,364 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:29:37,365 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:29:37,368 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:29:37,434 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:29:40,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:29:40,351 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:29:40,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:29:40,379 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:29:40,380 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:29:40,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:29:40,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:29:40,536 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:29:40,537 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:29:40,537 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:29:40,537 [printer.py:reinit()] - # Extruders: 0
2024-11-07 01:29:40,538 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 01:29:40,538 [printer.py:reinit()] - # Fans: 0
2024-11-07 01:29:40,538 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:29:40,538 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:29:40,539 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:29:40,561 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:29:40,563 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-07 01:29:40,796 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:29:40,797 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:29:40,798 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 01:29:40,798 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 01:29:40,917 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:29:40,983 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:29:55,461 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 01:29:55,462 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:29:55,465 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:29:55,465 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:29:55,470 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:29:55,552 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:29:58,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:29:58,353 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:29:58,362 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:29:58,379 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:29:58,380 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:29:58,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:29:58,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:29:58,429 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': 'PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:29:58,431 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:29:58,432 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:29:58,432 [printer.py:reinit()] - # Extruders: 1
2024-11-07 01:29:58,433 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 01:29:58,433 [printer.py:reinit()] - # Fans: 1
2024-11-07 01:29:58,433 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:29:58,433 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:29:58,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:29:58,457 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:29:58,459 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&fan
2024-11-07 01:29:58,716 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:29:58,717 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:29:58,717 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 01:29:58,718 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 01:29:59,427 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 01:29:59,427 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 01:29:59,429 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 01:29:59,436 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:29:59,578 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 01:29:59,594 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 01:29:59,659 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 01:29:59,661 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 01:29:59,701 [printer.py:init_temp_store()] - Temp store: ['extruder']
2024-11-07 01:29:59,704 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 01:29:59,726 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 01:30:52,656 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 01:30:52,657 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:30:52,659 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:30:52,662 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:30:52,669 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:30:52,809 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:30:56,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:30:56,351 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:30:56,362 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:30:56,380 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:30:56,381 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:30:56,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:30:56,404 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:30:56,433 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': 'PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:30:56,435 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:30:56,436 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:30:56,437 [printer.py:reinit()] - # Extruders: 1
2024-11-07 01:30:56,437 [printer.py:reinit()] - # Temperature devices: 1
2024-11-07 01:30:56,437 [printer.py:reinit()] - # Fans: 1
2024-11-07 01:30:56,437 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:30:56,438 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:30:56,438 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:30:56,463 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:30:56,465 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&fan&temperature_fan tcb1
2024-11-07 01:30:56,727 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:30:56,727 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:30:56,727 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-07 01:30:56,728 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 01:30:56,877 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 01:30:56,887 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:30:57,061 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 01:30:57,072 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 01:30:57,082 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 01:30:57,131 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 01:30:57,132 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 01:30:57,161 [printer.py:init_temp_store()] - Temp store: ['extruder']
2024-11-07 01:30:57,164 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 01:30:57,185 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 01:34:27,882 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 01:34:27,883 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:34:27,884 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:34:27,884 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:34:27,889 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:34:27,954 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:34:31,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:34:31,350 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:34:31,359 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:34:31,378 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:34:31,379 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:34:31,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:34:31,400 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:34:31,538 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:34:31,539 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:34:31,540 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:34:31,540 [printer.py:reinit()] - # Extruders: 0
2024-11-07 01:34:31,540 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 01:34:31,540 [printer.py:reinit()] - # Fans: 0
2024-11-07 01:34:31,541 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:34:31,541 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:34:31,541 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:34:31,563 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:34:31,565 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-07 01:34:31,796 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:34:31,797 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:34:31,797 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 01:34:31,798 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 01:34:31,919 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:34:31,988 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:34:47,369 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 01:34:47,369 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:34:47,371 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:34:47,372 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:34:47,376 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:34:47,471 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:34:50,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:34:50,350 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:34:50,360 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:34:50,377 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:34:50,377 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:34:50,378 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:34:50,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:34:50,534 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:34:50,535 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:34:50,536 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:34:50,536 [printer.py:reinit()] - # Extruders: 0
2024-11-07 01:34:50,536 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 01:34:50,536 [printer.py:reinit()] - # Fans: 0
2024-11-07 01:34:50,536 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:34:50,537 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:34:50,537 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:34:50,559 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:34:50,561 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-07 01:34:50,792 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:34:50,792 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:34:50,793 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 01:34:50,793 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 01:34:50,914 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:34:50,980 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:35:16,399 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 01:35:16,399 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:35:16,401 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:35:16,402 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:35:16,406 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:35:16,479 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:35:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:35:19,351 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:35:19,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:35:19,378 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:35:19,379 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:35:19,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:35:19,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:35:19,430 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': 'PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:35:19,433 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:35:19,434 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:35:19,434 [printer.py:reinit()] - # Extruders: 1
2024-11-07 01:35:19,434 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 01:35:19,434 [printer.py:reinit()] - # Fans: 2
2024-11-07 01:35:19,435 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:35:19,435 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:35:19,435 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:35:19,459 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:35:19,462 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 01:35:19,721 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:35:19,722 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:35:19,722 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 01:35:19,723 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 01:35:20,428 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 01:35:20,429 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 01:35:20,432 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 01:35:20,441 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:35:20,643 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 01:35:20,654 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 01:35:20,664 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 01:35:20,674 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 01:35:20,734 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 01:35:20,736 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 01:35:20,773 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'extruder']
2024-11-07 01:35:20,775 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 01:35:20,795 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 01:55:19,905 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 01:55:19,905 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:55:19,907 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:55:19,907 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:55:19,912 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:55:19,978 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:55:23,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:55:23,350 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:55:23,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:55:23,380 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:55:23,381 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:55:23,382 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:55:23,406 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:55:23,438 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': 'PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '250'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 250.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:55:23,441 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:55:23,442 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:55:23,442 [printer.py:reinit()] - # Extruders: 1
2024-11-07 01:55:23,443 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 01:55:23,443 [printer.py:reinit()] - # Fans: 2
2024-11-07 01:55:23,443 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:55:23,443 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:55:23,444 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:55:23,469 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:55:23,471 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 01:55:23,728 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:55:23,729 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:55:23,729 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 01:55:23,730 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 01:55:24,179 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 01:55:24,179 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 01:55:24,182 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 01:55:24,187 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:55:24,313 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 01:55:24,328 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 01:55:24,338 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 01:55:24,348 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 01:55:24,402 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 01:55:24,404 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 01:55:24,455 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 01:55:24,458 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 01:55:24,478 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 01:56:38,643 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 01:56:38,643 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:56:38,645 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:56:38,645 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:56:38,649 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:56:38,717 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:56:42,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:56:42,351 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:56:42,362 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:56:42,380 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:56:42,381 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:56:42,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:56:42,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:56:42,439 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:56:42,443 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:56:42,444 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:56:42,444 [printer.py:reinit()] - # Extruders: 1
2024-11-07 01:56:42,444 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 01:56:42,445 [printer.py:reinit()] - # Fans: 2
2024-11-07 01:56:42,445 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:56:42,445 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:56:42,446 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:56:42,471 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:56:42,474 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 01:56:42,738 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:56:42,739 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:56:42,739 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 01:56:42,740 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 01:56:42,936 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 01:56:42,936 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 01:56:42,958 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 01:56:42,963 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:56:43,086 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 01:56:43,097 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 01:56:43,106 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 01:56:43,116 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 01:56:43,170 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 01:56:43,172 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 01:56:43,229 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 01:56:43,232 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 01:56:43,252 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 01:56:50,847 [screen.py:show_popup_message()] - error: Must home X and Y axes first
2024-11-07 01:57:28,017 [screen.py:show_popup_message()] - error: // Unknown command:"QUERY_"
2024-11-07 01:57:47,376 [screen.py:show_popup_message()] - error: Must home X and Y axes first
2024-11-07 01:57:49,858 [screen.py:show_popup_message()] - error: Must home X and Y axes first
2024-11-07 01:58:00,431 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-07 01:58:00,432 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-07 01:58:00,686 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:58:00,690 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:58:00,761 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:58:25,849 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-07 01:58:25,850 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 01:58:25,852 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 01:58:25,852 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:58:25,856 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:58:25,969 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 01:58:29,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 01:58:29,349 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 01:58:29,359 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 01:58:29,378 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 01:58:29,378 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 01:58:29,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 01:58:29,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 01:58:29,432 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '999999'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 01:58:29,435 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 01:58:29,437 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 01:58:29,437 [printer.py:reinit()] - # Extruders: 1
2024-11-07 01:58:29,437 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 01:58:29,437 [printer.py:reinit()] - # Fans: 2
2024-11-07 01:58:29,438 [printer.py:reinit()] - # Output pins: 0
2024-11-07 01:58:29,438 [printer.py:reinit()] - # Leds: 0
2024-11-07 01:58:29,438 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 01:58:29,465 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 01:58:29,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 01:58:29,723 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 01:58:29,724 [screen.py:init_klipper()] - Printer initialized
2024-11-07 01:58:29,725 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 01:58:29,725 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 01:58:29,931 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 01:58:29,932 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 01:58:29,962 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 01:58:29,970 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 01:58:30,141 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 01:58:30,159 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 01:58:30,168 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 01:58:30,181 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 01:58:30,239 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 01:58:30,241 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 01:58:30,291 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 01:58:30,294 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 01:58:30,315 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 02:00:45,286 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 02:00:45,286 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 02:00:45,288 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 02:00:45,289 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:00:45,293 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:00:45,361 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:00:48,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 02:00:48,351 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 02:00:48,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 02:00:48,379 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 02:00:48,379 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 02:00:48,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 02:00:48,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 02:00:48,430 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '190'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '190'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 190}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 190}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 02:00:48,433 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:00:48,434 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 02:00:48,435 [printer.py:reinit()] - # Extruders: 1
2024-11-07 02:00:48,435 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 02:00:48,435 [printer.py:reinit()] - # Fans: 2
2024-11-07 02:00:48,435 [printer.py:reinit()] - # Output pins: 0
2024-11-07 02:00:48,435 [printer.py:reinit()] - # Leds: 0
2024-11-07 02:00:48,436 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 02:00:48,459 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 02:00:48,462 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 02:00:48,720 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 02:00:48,721 [screen.py:init_klipper()] - Printer initialized
2024-11-07 02:00:48,721 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 02:00:48,722 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 02:00:49,422 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 02:00:49,422 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 02:00:49,425 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 02:00:49,430 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:00:49,553 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 02:00:49,564 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 02:00:49,574 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 02:00:49,583 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 02:00:49,638 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 02:00:49,640 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 02:00:49,693 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 02:00:49,697 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 02:00:49,717 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 02:01:00,457 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-07 02:01:00,458 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-07 02:01:00,487 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:01:00,491 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:01:00,558 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:01:09,427 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-07 02:01:09,428 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 02:01:09,430 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 02:01:09,431 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:01:09,435 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:01:09,554 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:01:12,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 02:01:12,357 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 02:01:12,368 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 02:01:12,385 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 02:01:12,385 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 02:01:12,386 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 02:01:12,407 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 02:01:12,437 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA12', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PA11', 'position_endstop': '0', 'position_max': '165', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '190'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '190'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 190}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': '^PA12', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 190}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': '^PA11', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 02:01:12,441 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:01:12,442 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 02:01:12,442 [printer.py:reinit()] - # Extruders: 1
2024-11-07 02:01:12,442 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 02:01:12,443 [printer.py:reinit()] - # Fans: 2
2024-11-07 02:01:12,443 [printer.py:reinit()] - # Output pins: 0
2024-11-07 02:01:12,443 [printer.py:reinit()] - # Leds: 0
2024-11-07 02:01:12,443 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 02:01:12,466 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 02:01:12,468 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 02:01:12,727 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 02:01:12,728 [screen.py:init_klipper()] - Printer initialized
2024-11-07 02:01:12,728 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 02:01:12,729 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 02:01:13,686 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 02:01:13,687 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 02:01:13,690 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 02:01:13,700 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:01:13,824 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 02:01:13,839 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 02:01:13,851 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 02:01:13,861 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 02:01:13,916 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 02:01:13,918 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 02:01:13,972 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 02:01:13,976 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 02:01:14,002 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 02:03:51,149 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 02:03:51,150 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 02:03:51,152 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 02:03:51,152 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:03:51,157 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:03:51,224 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:03:54,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 02:03:54,349 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 02:03:54,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 02:03:54,375 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 02:03:54,376 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 02:03:54,376 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 02:03:54,397 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 02:03:54,598 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 02:03:54,599 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:03:54,600 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 02:03:54,600 [printer.py:reinit()] - # Extruders: 0
2024-11-07 02:03:54,600 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 02:03:54,601 [printer.py:reinit()] - # Fans: 0
2024-11-07 02:03:54,601 [printer.py:reinit()] - # Output pins: 0
2024-11-07 02:03:54,601 [printer.py:reinit()] - # Leds: 0
2024-11-07 02:03:54,601 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 02:03:54,624 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 02:03:54,626 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-07 02:03:54,855 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 02:03:54,856 [screen.py:init_klipper()] - Printer initialized
2024-11-07 02:03:54,856 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 02:03:54,857 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 02:03:54,971 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:03:55,038 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:04:16,369 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 02:04:16,370 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 02:04:16,372 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 02:04:16,372 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:04:16,376 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:04:16,458 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:04:19,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 02:04:19,351 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 02:04:19,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 02:04:19,378 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 02:04:19,378 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 02:04:19,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 02:04:19,400 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 02:04:19,429 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 02:04:19,431 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:04:19,432 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 02:04:19,432 [printer.py:reinit()] - # Extruders: 1
2024-11-07 02:04:19,433 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 02:04:19,433 [printer.py:reinit()] - # Fans: 2
2024-11-07 02:04:19,433 [printer.py:reinit()] - # Output pins: 0
2024-11-07 02:04:19,433 [printer.py:reinit()] - # Leds: 0
2024-11-07 02:04:19,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 02:04:19,459 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 02:04:19,461 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 02:04:19,720 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 02:04:19,721 [screen.py:init_klipper()] - Printer initialized
2024-11-07 02:04:19,722 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 02:04:19,722 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 02:04:20,425 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 02:04:20,426 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 02:04:20,431 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 02:04:20,439 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:04:20,633 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 02:04:20,644 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 02:04:20,653 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 02:04:20,663 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 02:04:20,731 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 02:04:20,732 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 02:04:20,786 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 02:04:20,789 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 02:04:20,819 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 02:05:18,030 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 02:05:18,030 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 02:05:18,032 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 02:05:18,033 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:05:18,037 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:05:18,104 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:05:21,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 02:05:21,348 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 02:05:21,357 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 02:05:21,375 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 02:05:21,375 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 02:05:21,376 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 02:05:21,396 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 02:05:21,426 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 02:05:21,430 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:05:21,431 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 02:05:21,432 [printer.py:reinit()] - # Extruders: 1
2024-11-07 02:05:21,432 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 02:05:21,433 [printer.py:reinit()] - # Fans: 2
2024-11-07 02:05:21,433 [printer.py:reinit()] - # Output pins: 0
2024-11-07 02:05:21,433 [printer.py:reinit()] - # Leds: 0
2024-11-07 02:05:21,435 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 02:05:21,464 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 02:05:21,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 02:05:21,718 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 02:05:21,719 [screen.py:init_klipper()] - Printer initialized
2024-11-07 02:05:21,720 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 02:05:21,720 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 02:05:22,167 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 02:05:22,167 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 02:05:22,170 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 02:05:22,175 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:05:22,303 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 02:05:22,314 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 02:05:22,324 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 02:05:22,335 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 02:05:22,392 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 02:05:22,394 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 02:05:22,446 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 02:05:22,449 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 02:05:22,470 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 02:05:50,994 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-07 02:05:50,995 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-07 02:05:51,022 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:05:51,026 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:05:51,093 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:06:00,021 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-07 02:06:00,022 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 02:06:00,025 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 02:06:00,025 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:06:00,030 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:06:00,151 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:06:03,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 02:06:03,352 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 02:06:03,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 02:06:03,378 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 02:06:03,379 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 02:06:03,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 02:06:03,405 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 02:06:03,437 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': '^PC6', 'position_endstop': '0', 'position_max': '200'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '999999'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '999999'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 02:06:03,441 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:06:03,442 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 02:06:03,443 [printer.py:reinit()] - # Extruders: 1
2024-11-07 02:06:03,443 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 02:06:03,443 [printer.py:reinit()] - # Fans: 2
2024-11-07 02:06:03,443 [printer.py:reinit()] - # Output pins: 0
2024-11-07 02:06:03,444 [printer.py:reinit()] - # Leds: 0
2024-11-07 02:06:03,444 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 02:06:03,470 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 02:06:03,473 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 02:06:03,730 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 02:06:03,730 [screen.py:init_klipper()] - Printer initialized
2024-11-07 02:06:03,731 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 02:06:03,731 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 02:06:04,197 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 02:06:04,198 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 02:06:04,202 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 02:06:04,209 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:06:04,372 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 02:06:04,383 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 02:06:04,392 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 02:06:04,402 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 02:06:04,459 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 02:06:04,461 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 02:06:04,511 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 02:06:04,514 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 02:06:04,534 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 02:09:29,277 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 02:09:29,277 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 02:09:29,279 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 02:09:29,279 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:09:29,284 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:09:29,349 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:09:32,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 02:09:32,352 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 02:09:32,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 02:09:32,378 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 02:09:32,379 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 02:09:32,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 02:09:32,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 02:09:32,430 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': 'PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '-0.300'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': 'PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': -0.3, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 02:09:32,433 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:09:32,434 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 02:09:32,435 [printer.py:reinit()] - # Extruders: 1
2024-11-07 02:09:32,435 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 02:09:32,435 [printer.py:reinit()] - # Fans: 2
2024-11-07 02:09:32,435 [printer.py:reinit()] - # Output pins: 0
2024-11-07 02:09:32,435 [printer.py:reinit()] - # Leds: 0
2024-11-07 02:09:32,436 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 02:09:32,459 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 02:09:32,461 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 02:09:32,726 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 02:09:32,726 [screen.py:init_klipper()] - Printer initialized
2024-11-07 02:09:32,727 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 02:09:32,727 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 02:09:33,429 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 02:09:33,429 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 02:09:33,433 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 02:09:33,438 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:09:33,551 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 02:09:33,561 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 02:09:33,572 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 02:09:33,582 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 02:09:33,647 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 02:09:33,649 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 02:09:33,699 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 02:09:33,703 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 02:09:33,723 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 02:12:29,844 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 02:12:29,845 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 02:12:29,846 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 02:12:29,847 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:12:29,851 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:12:29,920 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:12:33,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 02:12:33,348 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 02:12:33,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 02:12:33,376 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 02:12:33,377 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 02:12:33,377 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 02:12:33,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 02:12:33,527 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 02:12:33,529 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:12:33,529 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 02:12:33,530 [printer.py:reinit()] - # Extruders: 0
2024-11-07 02:12:33,530 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 02:12:33,530 [printer.py:reinit()] - # Fans: 0
2024-11-07 02:12:33,530 [printer.py:reinit()] - # Output pins: 0
2024-11-07 02:12:33,531 [printer.py:reinit()] - # Leds: 0
2024-11-07 02:12:33,531 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 02:12:33,553 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 02:12:33,555 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-07 02:12:33,785 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 02:12:33,786 [screen.py:init_klipper()] - Printer initialized
2024-11-07 02:12:33,786 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 02:12:33,787 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 02:12:33,905 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:12:33,973 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:15:44,496 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 02:15:44,497 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 02:15:44,498 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 02:15:44,499 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:15:44,501 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:15:44,569 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 02:15:48,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 02:15:48,351 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 02:15:48,362 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 02:15:48,380 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 02:15:48,381 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 02:15:48,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 02:15:48,404 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 02:15:48,446 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': 'PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right\n\n\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}'}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': 'PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right\n\n\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 02:15:48,450 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 02:15:48,452 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 02:15:48,453 [printer.py:reinit()] - # Extruders: 1
2024-11-07 02:15:48,454 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 02:15:48,454 [printer.py:reinit()] - # Fans: 2
2024-11-07 02:15:48,455 [printer.py:reinit()] - # Output pins: 0
2024-11-07 02:15:48,456 [printer.py:reinit()] - # Leds: 0
2024-11-07 02:15:48,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 02:15:48,496 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 02:15:48,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 02:15:48,727 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 02:15:48,727 [screen.py:init_klipper()] - Printer initialized
2024-11-07 02:15:48,728 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-07 02:15:48,728 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 02:15:48,844 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 02:15:48,849 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 02:15:48,966 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 02:15:48,980 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 02:15:48,991 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 02:15:49,002 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 02:15:49,065 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 02:15:49,067 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 02:15:49,114 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 02:15:49,117 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 02:15:49,137 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 02:19:14,325 [screen.py:show_screensaver()] - Showing Screensaver
2024-11-07 12:29:39,759 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-07 12:29:39,761 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-07 12:29:39,768 [screen.py:close_screensaver()] - Closing Screensaver
2024-11-07 12:29:39,836 [screen.py:wake_screen()] - Screen wake up
2024-11-07 12:29:39,845 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:29:39,848 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:29:39,914 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 12:29:45,726 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-07 12:29:45,727 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 12:29:45,729 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 12:29:45,729 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:29:45,733 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:29:45,856 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 12:29:49,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 12:29:49,348 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 12:29:49,359 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 12:29:49,378 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 12:29:49,378 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 12:29:49,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 12:29:49,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 12:29:49,434 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': 'PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right\n\n\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}'}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': 'PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right\n\n\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 12:29:49,438 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:29:49,439 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 12:29:49,439 [printer.py:reinit()] - # Extruders: 1
2024-11-07 12:29:49,439 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 12:29:49,440 [printer.py:reinit()] - # Fans: 2
2024-11-07 12:29:49,440 [printer.py:reinit()] - # Output pins: 0
2024-11-07 12:29:49,440 [printer.py:reinit()] - # Leds: 0
2024-11-07 12:29:49,441 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 12:29:49,470 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 12:29:49,473 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 12:29:49,725 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 12:29:49,726 [screen.py:init_klipper()] - Printer initialized
2024-11-07 12:29:49,726 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 12:29:49,727 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 12:29:49,969 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 12:29:49,970 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 12:29:49,990 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 12:29:49,998 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:29:50,167 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 12:29:50,180 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 12:29:50,192 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 12:29:50,202 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 12:29:50,261 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 12:29:50,264 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 12:29:50,318 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 12:29:50,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 12:29:50,345 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 12:30:33,503 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 12:30:33,503 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 12:30:33,505 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 12:30:33,505 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:30:33,509 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:30:33,577 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 12:30:37,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 12:30:37,350 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 12:30:37,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 12:30:37,381 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 12:30:37,381 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 12:30:37,382 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 12:30:37,405 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 12:30:37,437 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'safe_z_home': {'home_xy_position': '120,120', 'speed': '50.0', 'z_hop': '5'}, 'bed_screws': {'screw1': '65,5', 'screw1_name': 'front screw', 'screw2': '10,110', 'screw2_name': 'back left', 'screw3': '120,110', 'screw3_name': 'back right\n\n\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}'}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'safe_z_home': {'home_xy_position': [120.0, 120.0], 'z_hop': 5.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_screws': {'screw1': [65.0, 5.0], 'screw1_name': 'front screw', 'screw2': [10.0, 110.0], 'screw2_name': 'back left', 'screw3': [120.0, 110.0], 'screw3_name': 'back right\n\n\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 12:30:37,441 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:30:37,442 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 12:30:37,443 [printer.py:reinit()] - # Extruders: 1
2024-11-07 12:30:37,443 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 12:30:37,443 [printer.py:reinit()] - # Fans: 2
2024-11-07 12:30:37,443 [printer.py:reinit()] - # Output pins: 0
2024-11-07 12:30:37,444 [printer.py:reinit()] - # Leds: 0
2024-11-07 12:30:37,444 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 12:30:37,471 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 12:30:37,473 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 12:30:37,727 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 12:30:37,728 [screen.py:init_klipper()] - Printer initialized
2024-11-07 12:30:37,728 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-07 12:30:37,728 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 12:30:37,842 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 12:30:37,848 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:30:37,972 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 12:30:37,986 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 12:30:37,998 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 12:30:38,008 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 12:30:38,062 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 12:30:38,064 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 12:30:38,112 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 12:30:38,115 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 12:30:38,135 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 12:30:40,481 [screen.py:show_popup_message()] - error: Must home X and Y axes first
2024-11-07 12:34:10,599 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 12:34:10,600 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 12:34:10,602 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 12:34:10,603 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:34:10,609 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:34:10,746 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 12:34:14,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 12:34:14,347 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 12:34:14,357 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 12:34:14,375 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 12:34:14,375 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 12:34:14,376 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 12:34:14,399 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 12:34:14,431 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 12:34:14,435 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:34:14,437 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 12:34:14,437 [printer.py:reinit()] - # Extruders: 1
2024-11-07 12:34:14,437 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 12:34:14,437 [printer.py:reinit()] - # Fans: 2
2024-11-07 12:34:14,438 [printer.py:reinit()] - # Output pins: 0
2024-11-07 12:34:14,438 [printer.py:reinit()] - # Leds: 0
2024-11-07 12:34:14,438 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 12:34:14,464 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 12:34:14,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 12:34:14,724 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 12:34:14,725 [screen.py:init_klipper()] - Printer initialized
2024-11-07 12:34:14,726 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 12:34:14,726 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 12:34:14,956 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 12:34:14,957 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 12:34:14,972 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 12:34:14,977 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:34:15,092 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 12:34:15,103 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 12:34:15,112 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 12:34:15,122 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 12:34:15,180 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 12:34:15,182 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 12:34:15,234 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 12:34:15,238 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 12:34:15,258 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 12:40:22,873 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 12:40:22,873 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 12:40:22,876 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 12:40:22,877 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:40:22,884 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:40:23,019 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 12:40:26,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 12:40:26,345 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 12:40:26,356 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 12:40:26,375 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 12:40:26,376 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 12:40:26,377 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 12:40:26,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 12:40:26,436 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '21.527', 'pid_ki': '1.063', 'pid_kd': '108.982', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 21.527, 'pid_ki': 1.063, 'pid_kd': 108.982, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 12:40:26,440 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:40:26,441 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 12:40:26,441 [printer.py:reinit()] - # Extruders: 1
2024-11-07 12:40:26,442 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 12:40:26,442 [printer.py:reinit()] - # Fans: 2
2024-11-07 12:40:26,442 [printer.py:reinit()] - # Output pins: 0
2024-11-07 12:40:26,443 [printer.py:reinit()] - # Leds: 0
2024-11-07 12:40:26,443 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 12:40:26,469 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 12:40:26,472 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 12:40:26,727 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 12:40:26,728 [screen.py:init_klipper()] - Printer initialized
2024-11-07 12:40:26,728 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 12:40:26,729 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 12:40:27,176 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 12:40:27,177 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 12:40:27,180 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 12:40:27,187 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:40:27,406 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 12:40:27,420 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 12:40:27,432 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 12:40:27,443 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 12:40:27,497 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 12:40:27,499 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 12:40:27,549 [printer.py:init_temp_store()] - Temp store: ['temperature_fan tcb1', 'heater_bed', 'extruder']
2024-11-07 12:40:27,552 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 12:40:27,572 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 12:45:14,674 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-07 12:45:18,794 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 12:45:18,794 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 12:45:18,796 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 12:45:18,796 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:45:18,803 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-07 12:45:18,804 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:45:18,873 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 12:45:22,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 12:45:22,352 [screen.py:show_popup_message()] - warning: 
Moonraker warnings:
Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. 

2024-11-07 12:45:22,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 12:45:22,382 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 12:45:22,383 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': ["Unable to create log file at '/home/biqu/printer_data/logs/moonraker.log'. Make sure that the folder '/home/biqu/printer_data/logs' exists and Moonraker has Read/Write access to the folder. "], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 12:45:22,384 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 12:45:22,407 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 12:45:22,439 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '270', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 12:45:22,443 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:45:22,444 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 12:45:22,445 [printer.py:reinit()] - # Extruders: 1
2024-11-07 12:45:22,445 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 12:45:22,445 [printer.py:reinit()] - # Fans: 2
2024-11-07 12:45:22,445 [printer.py:reinit()] - # Output pins: 0
2024-11-07 12:45:22,446 [printer.py:reinit()] - # Leds: 0
2024-11-07 12:45:22,446 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 12:45:22,473 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 12:45:22,476 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 12:45:22,733 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 12:45:22,734 [screen.py:init_klipper()] - Printer initialized
2024-11-07 12:45:22,735 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 12:45:22,735 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 12:45:22,935 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 12:45:22,936 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 12:45:23,050 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 12:45:23,057 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:45:23,184 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 12:45:23,199 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 12:45:23,208 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 12:45:23,218 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 12:45:23,274 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 12:45:23,276 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 12:45:23,326 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 12:45:23,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 12:45:23,349 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 12:52:28,588 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-11-07 12:52:28,590 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-11-07 12:52:28,591 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-11-07 12:52:28,596 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:52:28,705 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 12:52:28,812 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-11-07 12:52:28,815 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:52:28,895 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 12:52:28,918 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-07 12:52:28,918 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 12:52:28,932 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-11-07 12:52:39,328 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-07 12:52:39,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 12:52:39,354 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-11-07 12:52:39,374 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-11-07 12:52:39,391 [_logging.py:info()] - Websocket connected
2024-11-07 12:52:39,391 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-11-07 12:52:39,393 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 12:52:39,415 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 12:52:39,434 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 12:52:39,435 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 12:52:39,436 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 12:52:39,460 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 12:52:39,744 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '270', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '68.453', 'pid_ki': '2.749', 'pid_kd': '426.122'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 68.453, 'pid_ki': 2.749, 'pid_kd': 426.122, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 12:52:39,749 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 12:52:39,751 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 12:52:39,752 [printer.py:reinit()] - # Extruders: 1
2024-11-07 12:52:39,752 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 12:52:39,752 [printer.py:reinit()] - # Fans: 2
2024-11-07 12:52:39,753 [printer.py:reinit()] - # Output pins: 0
2024-11-07 12:52:39,753 [printer.py:reinit()] - # Leds: 0
2024-11-07 12:52:39,753 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 12:52:39,789 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 12:52:39,792 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 12:52:40,034 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 12:52:40,035 [screen.py:init_klipper()] - Printer initialized
2024-11-07 12:52:40,035 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-07 12:52:40,036 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 12:52:40,048 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 12:52:40,053 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 12:52:40,176 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 12:52:40,189 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 12:52:40,199 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 12:52:40,210 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 12:52:40,274 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 12:52:40,276 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 12:52:40,318 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 12:52:40,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 12:52:40,346 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 12:55:57,415 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff90181200 (GtkDialog at 0x1362a2e0)>
2024-11-07 12:55:57,446 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-07 13:00:00,607 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-07 13:00:00,639 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-07 13:00:01,737 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:00:01,738 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:00:01,739 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:00:01,739 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:00:01,754 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-07 13:00:01,756 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:00:01,826 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:00:05,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:00:05,347 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:00:05,365 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:00:05,366 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:00:05,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:00:05,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:00:05,420 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '270', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:00:05,424 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:00:05,425 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:00:05,425 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:00:05,425 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:00:05,426 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:00:05,426 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:00:05,426 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:00:05,427 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:00:05,452 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:00:05,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:00:05,716 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:00:05,716 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:00:05,717 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:00:05,717 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:00:06,166 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:00:06,166 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:00:06,170 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:00:06,175 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:00:06,293 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:00:06,303 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:00:06,313 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:00:06,323 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:00:06,376 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:00:06,378 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:00:06,427 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:00:06,430 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:00:06,451 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:01:38,311 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:01:38,312 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:01:38,313 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:01:38,314 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:01:38,318 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:01:38,385 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:01:41,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:01:41,355 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:01:41,377 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:01:41,378 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:01:41,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:01:41,404 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:01:41,443 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'microsteps': '16', 'rotation_distance': '33.500', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 33.5, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:01:41,447 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:01:41,448 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:01:41,448 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:01:41,449 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:01:41,449 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:01:41,449 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:01:41,449 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:01:41,450 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:01:41,529 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:01:41,532 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:01:41,736 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:01:41,737 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:01:41,737 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:01:41,737 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:01:42,683 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:01:42,683 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:01:42,686 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:01:42,691 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:01:42,805 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:01:42,816 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:01:42,825 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:01:42,835 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:01:42,889 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:01:42,891 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:01:42,940 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:01:42,945 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:01:42,965 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:07:34,527 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:07:34,528 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:07:34,529 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:07:34,530 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:07:34,535 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:07:34,605 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:07:38,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:07:38,352 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:07:38,371 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:07:38,372 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:07:38,372 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:07:38,395 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:07:38,433 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:07:38,438 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:07:38,440 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:07:38,440 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:07:38,443 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:07:38,444 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:07:38,444 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:07:38,445 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:07:38,446 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:07:38,473 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:07:38,476 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:07:38,722 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:07:38,723 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:07:38,723 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:07:38,724 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:07:38,918 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:07:38,918 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:07:38,921 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:07:38,926 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:07:39,040 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:07:39,051 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:07:39,060 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:07:39,071 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:07:39,129 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:07:39,131 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:07:39,185 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:07:39,188 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:07:39,209 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:10:41,239 [screen.py:_load_panel()] - Loading panel: zcalibrate
2024-11-07 13:10:41,260 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:0.0
2024-11-07 13:10:41,299 [zcalibrate.py:set_functions()] - Available functions for calibration: ['endstop']
2024-11-07 13:10:41,334 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > zcalibrate
2024-11-07 13:11:13,539 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 0.300 [200.000]
2024-11-07 13:13:14,960 [screen.py:show_popup_message()] - error: Move out of range: 130.000 110.000 4.200 [200.000]
2024-11-07 13:13:14,970 [zcalibrate.py:process_update()] - !! Move out of range: 130.000 110.000 4.200 [200.000]
2024-11-07 13:13:17,721 [screen.py:show_popup_message()] - error: Move out of range: 130.000 110.000 4.200 [200.000]
2024-11-07 13:13:17,735 [zcalibrate.py:process_update()] - !! Move out of range: 130.000 110.000 4.200 [200.000]
2024-11-07 13:13:17,737 [zcalibrate.py:process_update()] - !! Move out of range: 130.000 110.000 4.200 [200.000]
2024-11-07 13:13:17,739 [zcalibrate.py:process_update()] - !! Move out of range: 130.000 110.000 4.200 [200.000]
2024-11-07 13:13:17,741 [zcalibrate.py:process_update()] - !! Move out of range: 130.000 110.000 4.200 [200.000]
2024-11-07 13:13:50,790 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:13:50,791 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:13:50,793 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:13:50,793 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:13:50,797 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:13:50,864 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:13:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:13:54,349 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:13:54,368 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:13:54,369 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:13:54,369 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:13:54,399 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:13:54,431 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:13:54,435 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:13:54,437 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:13:54,437 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:13:54,438 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:13:54,438 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:13:54,439 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:13:54,440 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:13:54,440 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:13:54,471 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:13:54,474 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:13:54,729 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:13:54,729 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:13:54,730 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:13:54,730 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:13:55,171 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:13:55,171 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:13:55,174 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:13:55,179 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:13:55,292 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:13:55,303 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:13:55,314 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:13:55,324 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:13:55,378 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:13:55,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:13:55,432 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:13:55,436 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:13:55,457 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:14:36,672 [screen.py:show_popup_message()] - error: Move out of range: 130.000 110.000 30.000 [0.000]
2024-11-07 13:15:14,898 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:15:14,899 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:15:14,902 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:15:14,903 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:15:14,907 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:15:14,974 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:15:18,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:15:18,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:15:18,362 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:15:18,362 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:15:18,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:15:18,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:15:18,415 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '150'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 150}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:15:18,419 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:15:18,420 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:15:18,420 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:15:18,421 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:15:18,421 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:15:18,421 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:15:18,421 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:15:18,421 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:15:18,445 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:15:18,448 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:15:18,711 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:15:18,712 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:15:18,712 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:15:18,713 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:15:19,162 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:15:19,162 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:15:19,165 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:15:19,171 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:15:19,289 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:15:19,304 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:15:19,314 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:15:19,324 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:15:19,380 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:15:19,382 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:15:19,435 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:15:19,439 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:15:19,459 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:15:51,343 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:15:51,344 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:15:51,345 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:15:51,346 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:15:51,350 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:15:51,431 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:15:54,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:15:54,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:15:54,366 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:15:54,367 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:15:54,368 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:15:54,394 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:15:54,433 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '190'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '190'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 190}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 190}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:15:54,437 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:15:54,439 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:15:54,439 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:15:54,439 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:15:54,440 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:15:54,440 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:15:54,442 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:15:54,442 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:15:54,476 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:15:54,481 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:15:54,724 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:15:54,725 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:15:54,726 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:15:54,726 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:15:55,671 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:15:55,672 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:15:55,674 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:15:55,679 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:15:55,792 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:15:55,803 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:15:55,813 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:15:55,823 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:15:55,883 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:15:55,885 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:15:55,937 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:15:55,941 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:15:55,961 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:16:32,790 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:16:32,790 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:16:32,792 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:16:32,792 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:16:32,797 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:16:32,864 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:16:36,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:16:36,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:16:36,361 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:16:36,362 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:16:36,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:16:36,383 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:16:36,420 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '240'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '240'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 240}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 240}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:16:36,424 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:16:36,426 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:16:36,426 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:16:36,427 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:16:36,427 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:16:36,429 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:16:36,429 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:16:36,430 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:16:36,461 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:16:36,463 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:16:36,711 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:16:36,712 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:16:36,713 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:16:36,713 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:16:37,157 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:16:37,157 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:16:37,160 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:16:37,165 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:16:37,278 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:16:37,291 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:16:37,300 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:16:37,310 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:16:37,364 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:16:37,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:16:37,418 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:16:37,422 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:16:37,446 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:17:30,847 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:17:30,848 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:17:30,849 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:17:30,850 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:17:30,855 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:17:30,922 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:17:34,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:17:34,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:17:34,363 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:17:34,364 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:17:34,365 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:17:34,386 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:17:34,415 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '255'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'full_steps_per_rotation': '200', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '255'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 255}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 255}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:17:34,419 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:17:34,420 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:17:34,421 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:17:34,421 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:17:34,421 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:17:34,421 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:17:34,421 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:17:34,422 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:17:34,455 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:17:34,458 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:17:34,711 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:17:34,712 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:17:34,712 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:17:34,713 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:17:35,161 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:17:35,162 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:17:35,165 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:17:35,170 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:17:35,282 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:17:35,293 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:17:35,302 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:17:35,312 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:17:35,365 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:17:35,367 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:17:35,421 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:17:35,424 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:17:35,445 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:20:27,185 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:20:27,185 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:20:27,187 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:20:27,187 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:20:27,192 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:20:27,262 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:20:30,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:20:30,347 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:20:30,367 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:20:30,368 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:20:30,368 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:20:30,396 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:20:30,430 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '255'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.500', 'stealthchop_threshold': '0', 'driver_sgthrs': '255'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 255}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 255}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:20:30,435 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:20:30,436 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:20:30,436 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:20:30,437 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:20:30,437 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:20:30,437 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:20:30,437 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:20:30,438 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:20:30,463 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:20:30,466 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:20:30,725 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:20:30,726 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:20:30,726 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:20:30,727 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:20:31,677 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:20:31,678 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:20:31,680 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:20:31,685 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:20:31,800 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:20:31,811 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:20:31,821 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:20:31,831 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:20:31,884 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:20:31,886 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:20:31,941 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:20:31,944 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:20:31,964 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:22:15,069 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:22:15,070 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:22:15,072 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:22:15,072 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:22:15,077 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:22:15,143 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:22:18,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:22:18,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:22:18,361 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:22:18,362 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:22:18,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:22:18,383 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:22:18,419 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '0', 'driver_sgthrs': '255'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '0', 'driver_sgthrs': '255'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 255}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 255}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:22:18,423 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:22:18,424 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:22:18,425 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:22:18,425 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:22:18,425 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:22:18,426 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:22:18,426 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:22:18,427 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:22:18,455 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:22:18,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:22:18,717 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:22:18,718 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:22:18,718 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:22:18,719 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:22:19,409 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:22:19,409 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:22:19,413 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:22:19,418 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:22:19,538 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:22:19,549 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:22:19,559 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:22:19,569 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:22:19,622 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:22:19,624 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:22:19,678 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:22:19,681 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:22:19,701 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:22:26,309 [screen.py:show_popup_message()] - error: Must home axis first: 10.000 0.000 0.000 [0.000]
2024-11-07 13:25:28,716 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:25:28,716 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:25:28,718 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:25:28,718 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:25:28,724 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:25:28,800 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:25:32,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:25:32,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:25:32,363 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:25:32,364 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:25:32,364 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:25:32,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:25:32,423 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '255'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '255'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 255}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 255}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:25:32,428 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:25:32,429 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:25:32,429 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:25:32,430 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:25:32,430 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:25:32,430 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:25:32,431 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:25:32,432 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:25:32,459 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:25:32,461 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:25:32,724 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:25:32,725 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:25:32,726 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:25:32,726 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:25:33,164 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:25:33,165 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:25:33,168 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:25:33,174 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:25:33,287 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:25:33,298 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:25:33,307 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:25:33,317 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:25:33,371 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:25:33,373 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:25:33,426 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:25:33,431 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:25:33,451 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:25:47,816 [screen.py:show_popup_message()] - error: Move out of range: 130.000 0.000 5.000 [0.000]
2024-11-07 13:25:49,277 [screen.py:show_popup_message()] - error: Move out of range: 121.000 0.000 5.000 [0.000]
2024-11-07 13:26:26,700 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:26:26,700 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:26:26,702 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:26:26,702 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:26:26,706 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:26:26,781 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:26:30,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:26:30,348 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:26:30,367 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:26:30,368 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:26:30,369 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:26:30,392 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:26:30,428 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '255'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '255'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 255}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 255}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:26:30,432 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:26:30,433 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:26:30,433 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:26:30,434 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:26:30,434 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:26:30,434 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:26:30,434 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:26:30,435 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:26:30,462 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:26:30,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:26:30,720 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:26:30,720 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:26:30,721 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:26:30,721 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:26:31,164 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:26:31,164 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:26:31,167 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:26:31,172 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:26:31,287 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:26:31,297 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:26:31,307 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:26:31,317 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:26:31,388 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:26:31,389 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:26:31,442 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:26:31,447 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:26:31,467 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:26:51,004 [screen.py:show_popup_message()] - error: Move out of range: 130.000 110.000 5.000 [0.000]
2024-11-07 13:26:57,858 [screen.py:show_popup_message()] - error: Move out of range: -10.000 110.000 5.000 [0.000]
2024-11-07 13:27:01,689 [screen.py:show_popup_message()] - error: Move out of range: -10.000 110.000 5.000 [0.000]
2024-11-07 13:27:08,567 [screen.py:show_popup_message()] - error: Move out of range: 60.000 130.000 5.000 [0.000]
2024-11-07 13:27:42,042 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:27:42,042 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:27:42,043 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:27:42,044 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:27:42,050 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:27:42,118 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:27:45,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:27:45,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:27:45,362 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:27:45,362 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:27:45,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:27:45,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:27:45,416 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '0'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '0'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:27:45,420 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:27:45,421 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:27:45,421 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:27:45,421 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:27:45,422 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:27:45,422 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:27:45,422 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:27:45,422 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:27:45,446 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:27:45,448 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:27:45,716 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:27:45,717 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:27:45,717 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:27:45,718 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:27:46,409 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:27:46,409 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:27:46,412 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:27:46,417 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:27:46,530 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:27:46,541 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:27:46,550 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:27:46,560 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:27:46,614 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:27:46,616 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:27:46,669 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:27:46,672 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:27:46,697 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:28:16,570 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:28:16,571 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:28:16,572 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:28:16,573 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:28:16,577 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:28:16,644 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:28:20,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:28:20,349 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:28:20,368 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:28:20,369 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:28:20,369 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:28:20,392 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:28:20,424 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:28:20,429 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:28:20,430 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:28:20,430 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:28:20,430 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:28:20,431 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:28:20,431 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:28:20,431 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:28:20,431 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:28:20,458 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:28:20,460 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:28:20,720 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:28:20,720 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:28:20,721 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:28:20,722 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:28:20,918 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:28:20,919 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:28:20,922 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:28:20,928 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:28:21,046 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:28:21,056 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:28:21,066 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:28:21,075 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:28:21,129 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:28:21,131 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:28:21,183 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:28:21,186 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:28:21,206 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:29:40,325 [screen.py:show_screensaver()] - Showing Screensaver
2024-11-07 13:30:06,265 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:30:06,266 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:30:06,267 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:30:06,268 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:30:06,269 [screen.py:close_screensaver()] - Closing Screensaver
2024-11-07 13:30:06,299 [screen.py:wake_screen()] - Screen wake up
2024-11-07 13:30:06,326 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:30:06,393 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:30:09,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:30:09,348 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:30:09,365 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:30:09,365 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:30:09,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:30:09,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:30:09,434 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:30:09,437 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:30:09,438 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:30:09,439 [printer.py:reinit()] - # Extruders: 0
2024-11-07 13:30:09,439 [printer.py:reinit()] - # Temperature devices: 0
2024-11-07 13:30:09,440 [printer.py:reinit()] - # Fans: 0
2024-11-07 13:30:09,441 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:30:09,442 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:30:09,442 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:30:09,476 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:30:09,479 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-07 13:30:09,688 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:30:09,688 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:30:09,689 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-07 13:30:09,689 [printer.py:change_state()] - Adding callback for state: error
2024-11-07 13:30:09,693 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:30:09,760 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:30:42,289 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-07 13:30:42,290 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:30:42,291 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:30:42,291 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:30:42,294 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:30:42,372 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:30:45,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:30:45,353 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:30:45,377 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:30:45,377 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:30:45,378 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:30:45,406 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:30:45,504 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:30:45,507 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:30:45,508 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:30:45,508 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:30:45,508 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:30:45,509 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:30:45,509 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:30:45,509 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:30:45,509 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:30:45,532 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:30:45,535 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:30:45,799 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:30:45,800 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:30:45,801 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:30:45,801 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:30:46,745 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:30:46,745 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:30:46,748 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:30:46,752 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:30:46,869 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:30:46,880 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:30:46,890 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:30:46,900 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:30:46,954 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:30:46,956 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:30:47,015 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:30:47,019 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:30:47,040 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:31:50,961 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:31:50,971 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:0.0
2024-11-07 13:31:51,048 [zcalibrate.py:set_functions()] - Available functions for calibration: ['endstop']
2024-11-07 13:31:51,116 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > zcalibrate
2024-11-07 13:33:23,264 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:33:23,265 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:33:23,268 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:33:23,268 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:33:23,272 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:33:23,341 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:33:26,334 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:33:26,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:33:26,384 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:33:26,384 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:33:26,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:33:26,459 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:33:26,493 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:33:26,497 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:33:26,499 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:33:26,499 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:33:26,499 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:33:26,499 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:33:26,500 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:33:26,500 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:33:26,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:33:26,525 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:33:26,527 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:33:26,786 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:33:26,787 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:33:26,788 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:33:26,788 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:33:27,734 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:33:27,734 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:33:27,737 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:33:27,742 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:33:27,856 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:33:27,867 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:33:27,877 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:33:27,887 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:33:27,940 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:33:27,942 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:33:27,994 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:33:27,997 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:33:28,018 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:33:54,818 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:33:54,824 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:0.0
2024-11-07 13:33:54,867 [zcalibrate.py:set_functions()] - Available functions for calibration: ['endstop']
2024-11-07 13:33:54,904 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > zcalibrate
2024-11-07 13:35:36,044 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:35:36,045 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:35:36,046 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:35:36,046 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:35:36,050 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:35:36,119 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:35:39,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:35:39,347 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:35:39,365 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:35:39,365 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:35:39,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:35:39,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:35:39,419 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:35:39,423 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:35:39,424 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:35:39,425 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:35:39,425 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:35:39,425 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:35:39,425 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:35:39,425 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:35:39,426 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:35:39,449 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:35:39,452 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:35:39,716 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:35:39,716 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:35:39,717 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:35:39,717 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:35:40,412 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:35:40,412 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:35:40,415 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:35:40,420 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:35:40,536 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:35:40,547 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:35:40,557 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:35:40,567 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:35:40,628 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:35:40,631 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:35:40,694 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:35:40,698 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:35:40,722 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:36:05,675 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:36:05,675 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:36:05,677 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:36:05,678 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:36:05,685 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:36:05,829 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:36:09,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:36:09,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:36:09,363 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:36:09,364 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:36:09,365 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:36:09,388 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:36:09,422 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_endstop': '120', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 120.0, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:36:09,426 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:36:09,427 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:36:09,428 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:36:09,428 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:36:09,428 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:36:09,428 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:36:09,428 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:36:09,429 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:36:09,455 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:36:09,458 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:36:09,718 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:36:09,719 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:36:09,719 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:36:09,720 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:36:10,167 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:36:10,167 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:36:10,171 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:36:10,176 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:36:10,310 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:36:10,321 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:36:10,331 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:36:10,341 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:36:10,395 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:36:10,397 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:36:10,449 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:36:10,452 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:36:10,472 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:37:04,332 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:37:04,338 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:0.0
2024-11-07 13:37:04,380 [zcalibrate.py:set_functions()] - Available functions for calibration: ['endstop']
2024-11-07 13:37:04,416 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > zcalibrate
2024-11-07 13:39:04,356 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff901e6200 (GtkDialog at 0x139496b0)>
2024-11-07 13:39:04,405 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-07 13:39:08,107 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:39:08,107 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:39:08,108 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:39:08,109 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:39:08,119 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-07 13:39:08,119 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:39:08,191 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:39:11,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:39:11,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:39:11,362 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:39:11,363 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:39:11,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:39:11,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:39:11,422 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:39:11,426 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:39:11,428 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:39:11,428 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:39:11,428 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:39:11,428 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:39:11,428 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:39:11,429 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:39:11,429 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:39:11,452 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:39:11,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:39:11,718 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:39:11,719 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:39:11,719 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:39:11,720 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:39:12,418 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:39:12,419 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:39:12,420 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:39:12,426 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:39:12,550 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:39:12,561 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:39:12,571 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:39:12,581 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:39:12,635 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:39:12,637 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:39:12,691 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:39:12,696 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:39:12,724 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:39:25,236 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-07 13:39:25,465 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-07 13:39:25,465 [printer.py:change_state()] - Adding callback for state: printing
2024-11-07 13:39:25,506 [screen.py:_load_panel()] - Loading panel: job_status
2024-11-07 13:39:25,930 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-07 13:39:25,941 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-07 13:39:25,966 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-07 13:39:25,997 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-07 13:39:43,855 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-11-07 13:39:44,014 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-07 13:39:44,015 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:39:44,035 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-11-07 13:40:40,148 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:40:40,149 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:40:40,151 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:40:40,151 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:40:40,158 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:40:40,282 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:40:43,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:40:43,348 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:40:43,365 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:40:43,366 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:40:43,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:40:43,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:40:43,419 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:40:43,423 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:40:43,424 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:40:43,424 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:40:43,424 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:40:43,424 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:40:43,425 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:40:43,425 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:40:43,425 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:40:43,451 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:40:43,453 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:40:43,714 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:40:43,714 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:40:43,715 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:40:43,715 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:40:44,415 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:40:44,417 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:40:44,421 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:40:44,432 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:40:44,595 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:40:44,607 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:40:44,616 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:40:44,626 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:40:44,689 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:40:44,691 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:40:44,740 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:40:44,743 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:40:44,771 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:40:51,967 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-07 13:40:52,196 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-07 13:40:52,197 [printer.py:change_state()] - Adding callback for state: printing
2024-11-07 13:40:52,237 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:40:52,434 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-07 13:40:52,445 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-07 13:40:52,460 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-07 13:40:52,471 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-07 13:41:08,074 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-11-07 13:41:08,235 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-07 13:41:08,236 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:41:08,255 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-11-07 13:45:49,096 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:45:49,097 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:45:49,098 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:45:49,099 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:45:49,103 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:45:49,170 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:45:52,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:45:52,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:45:52,363 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:45:52,364 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:45:52,364 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:45:52,388 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:45:52,423 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '190', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '90', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 190.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 90.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:45:52,426 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:45:52,427 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:45:52,428 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:45:52,428 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:45:52,428 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:45:52,428 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:45:52,428 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:45:52,429 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:45:52,453 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:45:52,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:45:52,717 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:45:52,718 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:45:52,718 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:45:52,719 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:45:53,415 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:45:53,415 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:45:53,418 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:45:53,423 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:45:53,536 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:45:53,547 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:45:53,556 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:45:53,567 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:45:53,632 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:45:53,634 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:45:53,686 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:45:53,690 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:45:53,711 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:45:54,928 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-07 13:45:54,929 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-07 13:45:54,940 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:45:54,944 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:45:55,011 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:46:05,578 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-07 13:46:05,579 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:46:05,581 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:46:05,581 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:46:05,586 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:46:05,727 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:46:09,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:46:09,347 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:46:09,365 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:46:09,366 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:46:09,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:46:09,388 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:46:09,423 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '190', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '90', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 190.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 90.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:46:09,427 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:46:09,429 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:46:09,429 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:46:09,429 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:46:09,430 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:46:09,430 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:46:09,431 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:46:09,431 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:46:09,457 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:46:09,459 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:46:09,717 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:46:09,718 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:46:09,719 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:46:09,719 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:46:09,915 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:46:09,916 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:46:09,919 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:46:09,928 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:46:10,100 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:46:10,116 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:46:10,131 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:46:10,141 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:46:10,202 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:46:10,204 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:46:10,253 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:46:10,255 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:46:10,276 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:46:11,426 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-07 13:46:11,427 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-07 13:46:11,438 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:46:11,442 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:46:11,510 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:46:48,491 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-07 13:46:48,492 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:46:48,493 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:46:48,494 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:46:48,497 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:46:48,573 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:46:52,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:46:52,349 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:46:52,371 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:46:52,372 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:46:52,372 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:46:52,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:46:52,432 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '150', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '90', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 150.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 90.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:46:52,436 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:46:52,437 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:46:52,437 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:46:52,438 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:46:52,438 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:46:52,438 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:46:52,439 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:46:52,439 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:46:52,468 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:46:52,471 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:46:52,727 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:46:52,727 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:46:52,728 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:46:52,728 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:46:52,921 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:46:52,922 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:46:52,924 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:46:52,929 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:46:53,045 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:46:53,056 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:46:53,065 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:46:53,075 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:46:53,129 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:46:53,131 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:46:53,185 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:46:53,189 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:46:53,209 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:46:54,440 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-07 13:46:54,440 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-07 13:46:54,451 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:46:54,455 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:46:54,524 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:47:04,315 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-07 13:47:04,315 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:47:04,316 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:47:04,317 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:47:04,320 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:47:04,410 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:47:07,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:47:07,356 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:47:07,380 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:47:07,381 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:47:07,382 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:47:07,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:47:07,489 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '90', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 90.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:47:07,494 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:47:07,495 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:47:07,495 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:47:07,496 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:47:07,496 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:47:07,496 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:47:07,497 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:47:07,497 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:47:07,527 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:47:07,530 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:47:07,783 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:47:07,783 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:47:07,784 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:47:07,784 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:47:08,730 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:47:08,731 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:47:08,733 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:47:08,739 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:47:08,863 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:47:08,874 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:47:08,884 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:47:08,894 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:47:08,947 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:47:08,949 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:47:09,003 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:47:09,006 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:47:09,031 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:47:10,242 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-07 13:47:10,243 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-07 13:47:10,254 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:47:10,258 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:47:10,326 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:47:26,094 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-07 13:47:26,095 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:47:26,096 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:47:26,097 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:47:26,099 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:47:26,176 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:47:29,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:47:29,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:47:29,362 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:47:29,363 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:47:29,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:47:29,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:47:29,420 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '220', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 220.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:47:29,424 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:47:29,425 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:47:29,426 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:47:29,426 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:47:29,426 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:47:29,426 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:47:29,427 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:47:29,427 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:47:29,452 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:47:29,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:47:29,723 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:47:29,723 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:47:29,724 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:47:29,724 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:47:30,414 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:47:30,415 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:47:30,417 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:47:30,422 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:47:30,537 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:47:30,548 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:47:30,558 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:47:30,570 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:47:30,627 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:47:30,629 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:47:30,682 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:47:30,686 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:47:30,707 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:47:31,928 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-07 13:47:31,929 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-07 13:47:31,943 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:47:31,947 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:47:32,014 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:48:08,942 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-07 13:48:08,943 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:48:08,944 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:48:08,944 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:48:08,947 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:48:09,023 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:48:12,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:48:12,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:48:12,362 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:48:12,363 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:48:12,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:48:12,386 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:48:12,416 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:48:12,420 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:48:12,421 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:48:12,421 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:48:12,422 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:48:12,422 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:48:12,422 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:48:12,423 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:48:12,424 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:48:12,449 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:48:12,451 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:48:12,715 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:48:12,716 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:48:12,717 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:48:12,717 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:48:13,411 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:48:13,412 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:48:13,415 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:48:13,420 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:48:13,533 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:48:13,544 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:48:13,554 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:48:13,564 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:48:13,618 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:48:13,620 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:48:13,674 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:48:13,677 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:48:13,697 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:48:33,088 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:48:33,089 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:48:33,090 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:48:33,091 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:48:33,095 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:48:33,162 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:48:36,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:48:36,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:48:36,362 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:48:36,363 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:48:36,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:48:36,384 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:48:36,417 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '90', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 90.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:48:36,421 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:48:36,423 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:48:36,423 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:48:36,423 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:48:36,423 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:48:36,424 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:48:36,424 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:48:36,424 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:48:36,448 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:48:36,450 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:48:36,712 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:48:36,712 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:48:36,713 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:48:36,713 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:48:37,409 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:48:37,410 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:48:37,414 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:48:37,420 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:48:37,534 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:48:37,545 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:48:37,555 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:48:37,565 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:48:37,619 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:48:37,621 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:48:37,675 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:48:37,678 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:48:37,698 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:48:38,913 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-07 13:48:38,914 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-07 13:48:38,927 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:48:38,930 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:48:38,997 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:48:57,801 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-07 13:48:57,801 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:48:57,803 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:48:57,803 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:48:57,808 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:48:57,888 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:49:01,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:49:01,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:49:01,363 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:49:01,364 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:49:01,364 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:49:01,388 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:49:01,422 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:49:01,426 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:49:01,427 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:49:01,427 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:49:01,428 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:49:01,428 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:49:01,428 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:49:01,428 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:49:01,429 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:49:01,455 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:49:01,458 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:49:01,720 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:49:01,721 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:49:01,722 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:49:01,722 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:49:02,162 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:49:02,163 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:49:02,165 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:49:02,170 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:49:02,287 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:49:02,301 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:49:02,313 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:49:02,324 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:49:02,378 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:49:02,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:49:02,434 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:49:02,437 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:49:02,458 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:50:14,485 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-07 13:50:14,753 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-07 13:50:14,754 [printer.py:change_state()] - Adding callback for state: printing
2024-11-07 13:50:14,802 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:50:14,999 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-07 13:50:15,009 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-07 13:50:15,025 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-07 13:50:15,036 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-07 13:51:14,798 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-07 13:51:14,798 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:51:14,814 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-11-07 13:51:28,662 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-07 13:51:28,662 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-07 13:51:28,664 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-07 13:51:28,665 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:51:28,669 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:51:28,736 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-07 13:51:32,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-07 13:51:32,349 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-07 13:51:32,368 [printer.py:configure_cameras()] - Cameras: []
2024-11-07 13:51:32,369 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-07 13:51:32,369 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-07 13:51:32,392 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-07 13:51:32,424 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220\nM140 S100'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\nG28\nG90\nG1 Z20 F3000\nM109 S220\nM140 S100', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-07 13:51:32,428 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-07 13:51:32,430 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-07 13:51:32,430 [printer.py:reinit()] - # Extruders: 1
2024-11-07 13:51:32,430 [printer.py:reinit()] - # Temperature devices: 2
2024-11-07 13:51:32,431 [printer.py:reinit()] - # Fans: 2
2024-11-07 13:51:32,431 [printer.py:reinit()] - # Output pins: 0
2024-11-07 13:51:32,431 [printer.py:reinit()] - # Leds: 0
2024-11-07 13:51:32,431 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-07 13:51:32,458 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-07 13:51:32,460 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-07 13:51:32,723 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-07 13:51:32,723 [screen.py:init_klipper()] - Printer initialized
2024-11-07 13:51:32,724 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-07 13:51:32,724 [printer.py:change_state()] - Adding callback for state: startup
2024-11-07 13:51:32,915 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-07 13:51:32,916 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:51:32,918 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-07 13:51:32,923 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:51:33,037 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-07 13:51:33,048 [main_menu.py:add_device()] - Adding device: extruder
2024-11-07 13:51:33,058 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-07 13:51:33,068 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-07 13:51:33,124 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-07 13:51:33,126 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-07 13:51:33,180 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-07 13:51:33,183 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-07 13:51:33,203 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-07 13:51:43,680 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-07 13:51:43,841 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-07 13:51:43,842 [printer.py:change_state()] - Adding callback for state: printing
2024-11-07 13:51:43,863 [screen.py:show_panel()] - Reinitializing panel
2024-11-07 13:51:44,055 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-07 13:51:44,065 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-07 13:51:44,081 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-07 13:51:44,091 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-07 13:52:29,987 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-11-07 13:52:30,143 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-07 13:52:30,143 [printer.py:change_state()] - Adding callback for state: ready
2024-11-07 13:52:30,152 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-11-07 14:30:06,327 [screen.py:show_screensaver()] - Showing Screensaver
2024-11-08 11:55:47,702 [screen.py:close_screensaver()] - Closing Screensaver
2024-11-08 11:55:47,770 [screen.py:wake_screen()] - Screen wake up
2024-11-08 11:55:47,794 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-08 11:55:47,805 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-08 11:55:47,806 [printer.py:change_state()] - Adding callback for state: printing
2024-11-08 11:55:47,819 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2024-11-08 11:55:47,933 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 11:55:48,125 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-08 11:55:48,135 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-08 11:55:48,151 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-08 11:55:48,161 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-08 11:57:00,831 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-11-08 11:57:00,980 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-08 11:57:00,980 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 11:57:00,992 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-11-08 12:01:38,579 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-08 12:01:38,580 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-08 12:01:38,582 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-08 12:01:38,582 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:01:38,587 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:01:38,657 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-08 12:01:42,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-08 12:01:42,347 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-08 12:01:42,366 [printer.py:configure_cameras()] - Cameras: []
2024-11-08 12:01:42,367 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-08 12:01:42,367 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-08 12:01:42,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-08 12:01:42,425 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(90)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}  <---\n\nM140 S{BED_TEMP}\nM104 S200\nM109 S200\nM190 S{BED_TEMP}\nG28\nG90\nG1 Z20 F3000'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(90)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}  <---\n\nM140 S{BED_TEMP}\nM104 S200\nM109 S200\nM190 S{BED_TEMP}\nG28\nG90\nG1 Z20 F3000', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-08 12:01:42,430 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:01:42,431 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-08 12:01:42,431 [printer.py:reinit()] - # Extruders: 1
2024-11-08 12:01:42,432 [printer.py:reinit()] - # Temperature devices: 2
2024-11-08 12:01:42,432 [printer.py:reinit()] - # Fans: 2
2024-11-08 12:01:42,432 [printer.py:reinit()] - # Output pins: 0
2024-11-08 12:01:42,433 [printer.py:reinit()] - # Leds: 0
2024-11-08 12:01:42,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-08 12:01:42,471 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-08 12:01:42,475 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-08 12:01:42,718 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-08 12:01:42,718 [screen.py:init_klipper()] - Printer initialized
2024-11-08 12:01:42,719 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-08 12:01:42,719 [printer.py:change_state()] - Adding callback for state: startup
2024-11-08 12:01:43,166 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-08 12:01:43,166 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:01:43,169 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-08 12:01:43,175 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:01:43,299 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-08 12:01:43,310 [main_menu.py:add_device()] - Adding device: extruder
2024-11-08 12:01:43,319 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-08 12:01:43,329 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-08 12:01:43,385 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-08 12:01:43,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-08 12:01:43,440 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-08 12:01:43,443 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-08 12:01:43,464 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-08 12:01:51,394 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-08 12:01:51,635 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-08 12:01:51,635 [printer.py:change_state()] - Adding callback for state: printing
2024-11-08 12:01:51,661 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:01:51,854 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-08 12:01:51,865 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-08 12:01:51,883 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-08 12:01:51,893 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-08 12:07:36,785 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-11-08 12:07:36,929 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-08 12:07:36,929 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:07:36,955 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-11-08 12:07:49,500 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-08 12:07:49,500 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-08 12:07:49,502 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-08 12:07:49,502 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:07:49,507 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:07:49,579 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-08 12:07:53,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-08 12:07:53,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-08 12:07:53,368 [printer.py:configure_cameras()] - Cameras: []
2024-11-08 12:07:53,369 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-08 12:07:53,370 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-08 12:07:53,399 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-08 12:07:53,433 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S200\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S200\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-08 12:07:53,437 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:07:53,438 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-08 12:07:53,439 [printer.py:reinit()] - # Extruders: 1
2024-11-08 12:07:53,439 [printer.py:reinit()] - # Temperature devices: 2
2024-11-08 12:07:53,439 [printer.py:reinit()] - # Fans: 2
2024-11-08 12:07:53,439 [printer.py:reinit()] - # Output pins: 0
2024-11-08 12:07:53,439 [printer.py:reinit()] - # Leds: 0
2024-11-08 12:07:53,440 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-08 12:07:53,467 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-08 12:07:53,471 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-08 12:07:53,728 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-08 12:07:53,728 [screen.py:init_klipper()] - Printer initialized
2024-11-08 12:07:53,729 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-08 12:07:53,729 [printer.py:change_state()] - Adding callback for state: startup
2024-11-08 12:07:53,926 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-08 12:07:53,927 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:07:53,930 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-08 12:07:53,935 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:07:54,049 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-08 12:07:54,060 [main_menu.py:add_device()] - Adding device: extruder
2024-11-08 12:07:54,070 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-08 12:07:54,080 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-08 12:07:54,134 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-08 12:07:54,136 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-08 12:07:54,190 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-08 12:07:54,192 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-08 12:07:54,213 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-08 12:08:45,400 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-08 12:08:45,401 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-08 12:08:45,402 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-08 12:08:45,403 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:08:45,408 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:08:45,479 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-08 12:08:48,329 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-08 12:08:48,348 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-08 12:08:48,365 [printer.py:configure_cameras()] - Cameras: []
2024-11-08 12:08:48,366 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-08 12:08:48,367 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-08 12:08:48,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-08 12:08:48,430 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-08 12:08:48,434 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:08:48,436 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-08 12:08:48,436 [printer.py:reinit()] - # Extruders: 1
2024-11-08 12:08:48,436 [printer.py:reinit()] - # Temperature devices: 2
2024-11-08 12:08:48,437 [printer.py:reinit()] - # Fans: 2
2024-11-08 12:08:48,437 [printer.py:reinit()] - # Output pins: 0
2024-11-08 12:08:48,439 [printer.py:reinit()] - # Leds: 0
2024-11-08 12:08:48,439 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-08 12:08:48,473 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-08 12:08:48,476 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-08 12:08:48,722 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-08 12:08:48,723 [screen.py:init_klipper()] - Printer initialized
2024-11-08 12:08:48,723 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-08 12:08:48,724 [printer.py:change_state()] - Adding callback for state: startup
2024-11-08 12:08:49,667 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-08 12:08:49,667 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:08:49,670 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-08 12:08:49,675 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:08:49,787 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-08 12:08:49,798 [main_menu.py:add_device()] - Adding device: extruder
2024-11-08 12:08:49,808 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-08 12:08:49,817 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-08 12:08:49,874 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-08 12:08:49,876 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-08 12:08:49,929 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-08 12:08:49,932 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-08 12:08:49,953 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-08 12:08:58,455 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-08 12:08:58,455 [printer.py:change_state()] - Adding callback for state: printing
2024-11-08 12:08:58,488 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:08:58,716 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-08 12:08:58,727 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-08 12:08:58,742 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-08 12:08:58,753 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-08 12:08:58,764 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-08 12:12:01,648 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_START"
2024-11-08 12:12:30,300 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:12:47,739 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:12:50,826 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2024-11-08 12:12:50,827 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-08 12:12:50,868 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:12:50,872 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:12:50,942 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-08 12:13:07,043 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-08 12:13:07,044 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-08 12:13:07,046 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-08 12:13:07,047 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:13:07,051 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:13:07,179 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-08 12:13:10,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-08 12:13:10,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-08 12:13:10,363 [printer.py:configure_cameras()] - Cameras: []
2024-11-08 12:13:10,364 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-08 12:13:10,364 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-08 12:13:10,386 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-08 12:13:10,415 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.550'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.55, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-08 12:13:10,419 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:13:10,420 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-08 12:13:10,421 [printer.py:reinit()] - # Extruders: 1
2024-11-08 12:13:10,421 [printer.py:reinit()] - # Temperature devices: 2
2024-11-08 12:13:10,421 [printer.py:reinit()] - # Fans: 2
2024-11-08 12:13:10,421 [printer.py:reinit()] - # Output pins: 0
2024-11-08 12:13:10,421 [printer.py:reinit()] - # Leds: 0
2024-11-08 12:13:10,422 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-08 12:13:10,446 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-08 12:13:10,448 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-08 12:13:10,713 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-08 12:13:10,713 [screen.py:init_klipper()] - Printer initialized
2024-11-08 12:13:10,714 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-08 12:13:10,714 [printer.py:change_state()] - Adding callback for state: startup
2024-11-08 12:13:11,157 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-08 12:13:11,157 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:13:11,160 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-08 12:13:11,165 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:13:11,373 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-08 12:13:11,389 [main_menu.py:add_device()] - Adding device: extruder
2024-11-08 12:13:11,399 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-08 12:13:11,410 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-08 12:13:11,475 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-08 12:13:11,478 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-08 12:13:11,528 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-08 12:13:11,531 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-08 12:13:11,551 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-08 12:14:33,843 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-08 12:14:33,843 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-08 12:14:33,846 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-08 12:14:33,846 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:14:33,850 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:14:33,917 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-08 12:14:37,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-08 12:14:37,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-08 12:14:37,362 [printer.py:configure_cameras()] - Cameras: []
2024-11-08 12:14:37,363 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-08 12:14:37,364 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-08 12:14:37,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-08 12:14:37,416 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.500'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.5, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-08 12:14:37,420 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:14:37,421 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-08 12:14:37,421 [printer.py:reinit()] - # Extruders: 1
2024-11-08 12:14:37,421 [printer.py:reinit()] - # Temperature devices: 2
2024-11-08 12:14:37,421 [printer.py:reinit()] - # Fans: 2
2024-11-08 12:14:37,422 [printer.py:reinit()] - # Output pins: 0
2024-11-08 12:14:37,422 [printer.py:reinit()] - # Leds: 0
2024-11-08 12:14:37,422 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-08 12:14:37,455 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-08 12:14:37,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-08 12:14:37,716 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-08 12:14:37,716 [screen.py:init_klipper()] - Printer initialized
2024-11-08 12:14:37,717 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-08 12:14:37,717 [printer.py:change_state()] - Adding callback for state: startup
2024-11-08 12:14:38,159 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-08 12:14:38,160 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:14:38,161 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-08 12:14:38,170 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:14:38,285 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-08 12:14:38,296 [main_menu.py:add_device()] - Adding device: extruder
2024-11-08 12:14:38,306 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-08 12:14:38,316 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-08 12:14:38,373 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-08 12:14:38,375 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-08 12:14:38,428 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-08 12:14:38,432 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-08 12:14:38,452 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-08 12:14:42,873 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-08 12:14:43,035 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-08 12:14:43,036 [printer.py:change_state()] - Adding callback for state: printing
2024-11-08 12:14:43,076 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:14:43,334 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-08 12:14:43,352 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-08 12:14:43,383 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-08 12:14:43,407 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-08 12:15:43,590 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-08 12:15:43,591 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:15:43,605 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-11-08 12:16:36,753 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-08 12:16:36,754 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-08 12:16:36,755 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-08 12:16:36,756 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:16:36,760 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:16:36,827 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-08 12:16:40,325 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-08 12:16:40,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-08 12:16:40,364 [printer.py:configure_cameras()] - Cameras: []
2024-11-08 12:16:40,365 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-08 12:16:40,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-08 12:16:40,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-08 12:16:40,422 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.600'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.6, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-08 12:16:40,427 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:16:40,428 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-08 12:16:40,428 [printer.py:reinit()] - # Extruders: 1
2024-11-08 12:16:40,428 [printer.py:reinit()] - # Temperature devices: 2
2024-11-08 12:16:40,429 [printer.py:reinit()] - # Fans: 2
2024-11-08 12:16:40,429 [printer.py:reinit()] - # Output pins: 0
2024-11-08 12:16:40,429 [printer.py:reinit()] - # Leds: 0
2024-11-08 12:16:40,429 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-08 12:16:40,456 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-08 12:16:40,459 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-08 12:16:40,719 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-08 12:16:40,720 [screen.py:init_klipper()] - Printer initialized
2024-11-08 12:16:40,720 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-08 12:16:40,721 [printer.py:change_state()] - Adding callback for state: startup
2024-11-08 12:16:41,163 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-08 12:16:41,164 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:16:41,166 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-08 12:16:41,171 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:16:41,289 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-08 12:16:41,300 [main_menu.py:add_device()] - Adding device: extruder
2024-11-08 12:16:41,310 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-08 12:16:41,320 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-08 12:16:41,374 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-08 12:16:41,376 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-08 12:16:41,429 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-08 12:16:41,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-08 12:16:41,453 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-08 12:16:54,807 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-08 12:16:54,989 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-08 12:16:54,990 [printer.py:change_state()] - Adding callback for state: printing
2024-11-08 12:16:55,061 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:16:55,278 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-08 12:16:55,290 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-08 12:16:55,306 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-08 12:16:55,317 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-08 12:18:07,677 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-08 12:18:07,677 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:18:07,697 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-11-08 12:18:53,553 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:18:53,559 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:0.0
2024-11-08 12:18:53,599 [zcalibrate.py:set_functions()] - Available functions for calibration: ['endstop']
2024-11-08 12:18:53,645 [screen.py:attach_panel()] - Current panel hierarchy: job_status > zcalibrate
2024-11-08 12:20:50,808 [screen.py:show_popup_message()] - error: // Unknown command:"PROBE_CALIBRATE"
2024-11-08 12:22:05,907 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffff90184500 (GtkDialog at 0x13857920)>
2024-11-08 12:22:05,958 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-08 12:22:11,316 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-08 12:22:11,316 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-08 12:22:11,317 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-08 12:22:11,318 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:22:11,327 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-08 12:22:11,328 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:22:11,400 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-08 12:22:14,337 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-08 12:22:14,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-08 12:22:14,386 [printer.py:configure_cameras()] - Cameras: []
2024-11-08 12:22:14,387 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-08 12:22:14,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-08 12:22:14,417 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-08 12:22:14,460 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-08 12:22:14,465 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 12:22:14,466 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2
2024-11-08 12:22:14,467 [printer.py:reinit()] - # Extruders: 1
2024-11-08 12:22:14,467 [printer.py:reinit()] - # Temperature devices: 2
2024-11-08 12:22:14,469 [printer.py:reinit()] - # Fans: 2
2024-11-08 12:22:14,469 [printer.py:reinit()] - # Output pins: 0
2024-11-08 12:22:14,470 [printer.py:reinit()] - # Leds: 0
2024-11-08 12:22:14,471 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-08 12:22:14,502 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-08 12:22:14,505 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-08 12:22:14,749 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-08 12:22:14,750 [screen.py:init_klipper()] - Printer initialized
2024-11-08 12:22:14,751 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-08 12:22:14,751 [printer.py:change_state()] - Adding callback for state: startup
2024-11-08 12:22:15,697 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-08 12:22:15,697 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:22:15,701 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-08 12:22:15,706 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:22:15,843 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-08 12:22:15,855 [main_menu.py:add_device()] - Adding device: extruder
2024-11-08 12:22:15,865 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-08 12:22:15,876 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-08 12:22:15,936 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-08 12:22:15,938 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-08 12:22:16,000 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-08 12:22:16,003 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-08 12:22:16,023 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-08 12:22:23,454 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-08 12:22:23,638 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-08 12:22:23,639 [printer.py:change_state()] - Adding callback for state: printing
2024-11-08 12:22:23,686 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:22:23,893 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-08 12:22:23,903 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-08 12:22:23,920 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-08 12:22:23,931 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-08 12:23:18,991 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_START"
2024-11-08 12:23:22,376 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-08 12:23:22,376 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:23:22,393 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-11-08 12:24:18,131 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-08 12:24:18,276 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-08 12:24:18,277 [printer.py:change_state()] - Adding callback for state: printing
2024-11-08 12:24:18,295 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2024-11-08 12:24:18,379 [screen.py:show_panel()] - Reinitializing panel
2024-11-08 12:24:18,575 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-08 12:24:18,585 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-08 12:24:18,600 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-08 12:24:18,611 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-08 12:24:56,028 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_START"
2024-11-08 12:25:24,673 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:25:42,112 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:25:59,626 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:26:17,245 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:26:34,766 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:26:50,363 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:27:05,953 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:27:21,581 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:27:37,215 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:27:52,898 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:28:08,636 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:28:24,453 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:28:40,157 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:28:55,702 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:29:11,383 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:29:26,954 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:29:42,400 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:29:58,234 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:30:13,836 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:30:29,442 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:30:44,943 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:31:00,752 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:31:16,370 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:31:32,032 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:31:47,736 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:32:03,247 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:32:18,756 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:32:34,295 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:32:50,132 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:33:05,794 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:33:21,509 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:33:36,919 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:33:52,533 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:34:08,135 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:34:23,755 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:34:39,390 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:34:55,025 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:35:10,981 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:35:26,527 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:35:42,267 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:35:57,776 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:36:13,468 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:36:29,257 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:36:44,817 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:37:00,557 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:37:16,200 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:37:31,803 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:37:47,408 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:38:03,065 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:38:18,680 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:38:34,285 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:38:49,984 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:39:05,468 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:39:21,186 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:39:36,695 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:39:52,226 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:40:08,005 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:40:23,615 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:40:39,189 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:40:54,725 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:41:10,333 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:41:25,935 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:41:41,561 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:41:57,213 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:42:12,838 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:42:28,614 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:42:44,315 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:43:00,081 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:43:15,742 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:43:31,117 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:43:46,864 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:44:02,449 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:44:18,099 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:44:33,769 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:44:49,158 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:45:04,983 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:45:20,617 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:45:35,372 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:45:53,910 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:46:11,571 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:46:29,074 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:46:46,691 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:47:04,207 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:47:24,941 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-08 12:47:27,562 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-08 12:47:27,563 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 12:47:27,584 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-11-08 12:55:48,328 [screen.py:show_screensaver()] - Showing Screensaver
2024-11-08 19:17:35,982 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-11-08 19:17:35,983 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a09
2024-11-08 19:17:35,983 [functions.py:log_start()] - Python version: 3.9
2024-11-08 19:17:36,372 [config.py:get_config_file_location()] - Passed config (-c): .
2024-11-08 19:17:36,375 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-11-08 19:17:36,399 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-11-08 19:17:36,543 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-11-08 19:17:36,544 [config.py:install_language()] - Using lang en
2024-11-08 19:17:36,577 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-11-08 19:17:36,580 [screen.py:__init__()] - Wayland: False Display name: :0
2024-11-08 19:17:36,586 [screen.py:__init__()] - Screen resolution: 1024x768
2024-11-08 19:17:36,589 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-11-08 19:17:38,145 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-11-08 19:17:38,165 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-11-08 19:17:38,178 [screen.py:initial_connection()] - Default printer: None
2024-11-08 19:17:38,257 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-11-08 19:17:38,258 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-11-08 19:17:38,340 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-08 19:17:38,357 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-08 19:17:38,357 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-08 19:17:38,391 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-11-08 19:17:38,414 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-11-08 19:17:38,433 [_logging.py:info()] - Websocket connected
2024-11-08 19:17:38,434 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-11-08 19:17:38,438 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-08 19:17:38,458 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-08 19:17:38,478 [printer.py:configure_cameras()] - Cameras: []
2024-11-08 19:17:38,479 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-08 19:17:38,479 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-08 19:17:38,503 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-08 19:17:38,667 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-08 19:17:38,670 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-08 19:17:38,671 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d
2024-11-08 19:17:38,672 [printer.py:reinit()] - # Extruders: 1
2024-11-08 19:17:38,672 [printer.py:reinit()] - # Temperature devices: 2
2024-11-08 19:17:38,673 [printer.py:reinit()] - # Fans: 2
2024-11-08 19:17:38,673 [printer.py:reinit()] - # Output pins: 0
2024-11-08 19:17:38,673 [printer.py:reinit()] - # Leds: 0
2024-11-08 19:17:38,673 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-08 19:17:38,702 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-08 19:17:38,705 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-08 19:17:38,925 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-08 19:17:38,926 [screen.py:init_klipper()] - Printer initialized
2024-11-08 19:17:38,926 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-08 19:17:38,927 [printer.py:change_state()] - Adding callback for state: ready
2024-11-08 19:17:39,233 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-08 19:17:39,238 [screen.py:_load_panel()] - Loading panel: main_menu
2024-11-08 19:17:39,374 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-08 19:17:39,387 [main_menu.py:add_device()] - Adding device: extruder
2024-11-08 19:17:39,398 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-08 19:17:39,411 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-08 19:17:39,470 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-08 19:17:39,473 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-08 19:17:39,516 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-08 19:17:39,519 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-08 19:17:39,542 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-11 23:16:59,864 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-11 23:16:59,865 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-11 23:16:59,867 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-11 23:16:59,867 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-11 23:16:59,871 [screen.py:show_panel()] - Reinitializing panel
2024-11-11 23:16:59,936 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-11 23:17:03,400 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-11 23:17:03,418 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-11 23:17:03,439 [printer.py:configure_cameras()] - Cameras: []
2024-11-11 23:17:03,440 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-11 23:17:03,441 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-11 23:17:03,472 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-11 23:17:03,511 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40.20', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40.20', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.2, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.2, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-11 23:17:03,514 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-11 23:17:03,515 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d
2024-11-11 23:17:03,515 [printer.py:reinit()] - # Extruders: 1
2024-11-11 23:17:03,516 [printer.py:reinit()] - # Temperature devices: 2
2024-11-11 23:17:03,516 [printer.py:reinit()] - # Fans: 2
2024-11-11 23:17:03,516 [printer.py:reinit()] - # Output pins: 0
2024-11-11 23:17:03,516 [printer.py:reinit()] - # Leds: 0
2024-11-11 23:17:03,516 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-11 23:17:03,542 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-11 23:17:03,545 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-11 23:17:03,810 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-11 23:17:03,811 [screen.py:init_klipper()] - Printer initialized
2024-11-11 23:17:03,811 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-11 23:17:03,812 [printer.py:change_state()] - Adding callback for state: startup
2024-11-11 23:17:04,251 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-11 23:17:04,252 [printer.py:change_state()] - Adding callback for state: ready
2024-11-11 23:17:04,254 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-11 23:17:04,259 [screen.py:show_panel()] - Reinitializing panel
2024-11-11 23:17:04,371 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-11 23:17:04,382 [main_menu.py:add_device()] - Adding device: extruder
2024-11-11 23:17:04,391 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-11 23:17:04,401 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-11 23:17:04,454 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-11 23:17:04,456 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-11 23:17:04,497 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-11 23:17:04,501 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-11 23:17:04,524 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-11 23:17:12,257 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-11 23:17:12,407 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-11 23:17:12,407 [printer.py:change_state()] - Adding callback for state: printing
2024-11-11 23:17:12,422 [screen.py:_load_panel()] - Loading panel: job_status
2024-11-11 23:17:12,653 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-11 23:17:12,663 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-11 23:17:12,692 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-11 23:17:12,711 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-11 23:23:50,790 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_START"
2024-11-11 23:24:19,440 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:24:36,884 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:24:54,393 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:25:12,012 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:25:29,526 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:25:45,130 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:26:00,720 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:26:16,372 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:26:31,987 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:26:47,645 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:27:03,404 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:27:19,222 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:27:34,927 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:27:50,469 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:28:06,145 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:28:21,723 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:28:37,168 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:28:53,001 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:29:08,605 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:29:24,209 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:29:39,710 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:29:55,523 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:30:11,138 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:30:26,800 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:30:42,501 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:30:58,010 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:31:13,530 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:31:29,056 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:31:44,900 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:32:00,562 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:32:16,277 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:32:31,686 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:32:47,301 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:33:02,903 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:33:18,523 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:33:34,159 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:33:49,792 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:34:05,751 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:34:21,295 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:34:37,039 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:34:52,551 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:35:08,236 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:35:24,024 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:35:39,585 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:35:55,324 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:36:10,967 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:36:26,566 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:36:42,170 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:36:57,807 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:37:08,322 [printer.py:change_state()] - Changing state from 'printing' to 'disconnected'
2024-11-11 23:37:08,323 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-11 23:37:08,324 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-11 23:37:08,324 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-11 23:37:08,336 [screen.py:show_panel()] - Reinitializing panel
2024-11-11 23:37:08,482 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-11 23:37:11,406 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-11 23:37:11,427 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-11 23:37:11,449 [printer.py:configure_cameras()] - Cameras: []
2024-11-11 23:37:11,450 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-11 23:37:11,450 [screen.py:init_klipper()] - Klipper not connected
2024-11-11 23:37:14,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-11 23:37:14,423 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-11 23:37:14,424 [screen.py:init_klipper()] - Klipper not connected
2024-11-11 23:37:17,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-11 23:37:17,416 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-11 23:37:17,416 [screen.py:init_klipper()] - Klipper not connected
2024-11-11 23:37:20,400 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-11 23:37:20,419 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-11 23:37:20,420 [screen.py:init_klipper()] - Klipper not connected
2024-11-11 23:37:23,399 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-11 23:37:23,417 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-11 23:37:23,418 [screen.py:init_klipper()] - Klipper not connected
2024-11-11 23:37:26,399 [screen.py:init_klipper()] - Stopping Retries
2024-11-11 23:38:19,400 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-11 23:38:19,435 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-11 23:38:19,436 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-11 23:38:19,470 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-11 23:38:19,565 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': '2.', 'verbose': 'True'}, 'gcode_macro HELLO_WORLD': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40.20', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40.20', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_shell_command hello_world': {'command': 'echo hello world', 'timeout': 2.0, 'verbose': True}, 'gcode_macro hello_world': {'gcode': '\nRUN_SHELL_COMMAND CMD=hello_world', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.2, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.2, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-11 23:38:19,571 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-11 23:38:19,574 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-11 23:38:19,574 [printer.py:reinit()] - # Extruders: 1
2024-11-11 23:38:19,576 [printer.py:reinit()] - # Temperature devices: 2
2024-11-11 23:38:19,576 [printer.py:reinit()] - # Fans: 2
2024-11-11 23:38:19,577 [printer.py:reinit()] - # Output pins: 0
2024-11-11 23:38:19,577 [printer.py:reinit()] - # Leds: 0
2024-11-11 23:38:19,578 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-11 23:38:19,616 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-11 23:38:19,620 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-11 23:38:19,857 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-11 23:38:19,857 [screen.py:init_klipper()] - Printer initialized
2024-11-11 23:38:19,858 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-11 23:38:19,859 [printer.py:change_state()] - Adding callback for state: ready
2024-11-11 23:38:19,860 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-11 23:38:19,866 [screen.py:show_panel()] - Reinitializing panel
2024-11-11 23:38:19,995 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-11 23:38:20,006 [main_menu.py:add_device()] - Adding device: extruder
2024-11-11 23:38:20,016 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-11 23:38:20,025 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-11 23:38:20,083 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-11 23:38:20,085 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-11 23:38:20,137 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-11 23:38:20,139 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-11 23:38:20,160 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-11 23:40:32,856 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-11 23:40:32,856 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-11 23:40:32,858 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-11 23:40:32,858 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-11 23:40:32,864 [screen.py:show_panel()] - Reinitializing panel
2024-11-11 23:40:32,932 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-11 23:40:36,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-11 23:40:36,416 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-11 23:40:36,433 [printer.py:configure_cameras()] - Cameras: []
2024-11-11 23:40:36,434 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-11 23:40:36,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-11 23:40:36,486 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-11 23:40:36,524 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40.20', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40.20', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.2, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.2, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-11 23:40:36,528 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-11 23:40:36,529 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-11 23:40:36,529 [printer.py:reinit()] - # Extruders: 1
2024-11-11 23:40:36,530 [printer.py:reinit()] - # Temperature devices: 2
2024-11-11 23:40:36,530 [printer.py:reinit()] - # Fans: 2
2024-11-11 23:40:36,530 [printer.py:reinit()] - # Output pins: 0
2024-11-11 23:40:36,531 [printer.py:reinit()] - # Leds: 0
2024-11-11 23:40:36,531 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-11 23:40:36,557 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-11 23:40:36,559 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-11 23:40:36,826 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-11 23:40:36,827 [screen.py:init_klipper()] - Printer initialized
2024-11-11 23:40:36,828 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-11 23:40:36,828 [printer.py:change_state()] - Adding callback for state: startup
2024-11-11 23:40:37,262 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-11 23:40:37,262 [printer.py:change_state()] - Adding callback for state: ready
2024-11-11 23:40:37,264 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-11 23:40:37,269 [screen.py:show_panel()] - Reinitializing panel
2024-11-11 23:40:37,391 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-11 23:40:37,402 [main_menu.py:add_device()] - Adding device: extruder
2024-11-11 23:40:37,411 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-11 23:40:37,421 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-11 23:40:37,479 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-11 23:40:37,480 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-11 23:40:37,533 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-11 23:40:37,537 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-11 23:40:37,558 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-11 23:43:04,384 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-11 23:43:04,385 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-11 23:43:04,388 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-11 23:43:04,388 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-11 23:43:04,395 [screen.py:show_panel()] - Reinitializing panel
2024-11-11 23:43:04,519 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-11 23:43:07,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-11 23:43:07,425 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-11 23:43:07,449 [printer.py:configure_cameras()] - Cameras: []
2024-11-11 23:43:07,450 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-11 23:43:07,451 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-11 23:43:07,480 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-11 23:43:07,519 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-11 23:43:07,524 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-11 23:43:07,525 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-11 23:43:07,525 [printer.py:reinit()] - # Extruders: 1
2024-11-11 23:43:07,526 [printer.py:reinit()] - # Temperature devices: 2
2024-11-11 23:43:07,526 [printer.py:reinit()] - # Fans: 2
2024-11-11 23:43:07,526 [printer.py:reinit()] - # Output pins: 0
2024-11-11 23:43:07,527 [printer.py:reinit()] - # Leds: 0
2024-11-11 23:43:07,528 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-11 23:43:07,591 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-11 23:43:07,593 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-11 23:43:07,798 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-11 23:43:07,800 [screen.py:init_klipper()] - Printer initialized
2024-11-11 23:43:07,802 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-11 23:43:07,803 [printer.py:change_state()] - Adding callback for state: startup
2024-11-11 23:43:08,758 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-11 23:43:08,758 [printer.py:change_state()] - Adding callback for state: ready
2024-11-11 23:43:08,761 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-11 23:43:08,766 [screen.py:show_panel()] - Reinitializing panel
2024-11-11 23:43:08,878 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-11 23:43:08,890 [main_menu.py:add_device()] - Adding device: extruder
2024-11-11 23:43:08,899 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-11 23:43:08,909 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-11 23:43:08,962 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-11 23:43:08,964 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-11 23:43:09,018 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-11 23:43:09,022 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-11 23:43:09,043 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-11 23:43:14,842 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-11-11 23:43:15,052 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-11 23:43:15,053 [printer.py:change_state()] - Adding callback for state: printing
2024-11-11 23:43:15,078 [screen.py:show_panel()] - Reinitializing panel
2024-11-11 23:43:15,267 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-11 23:43:15,280 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-11 23:43:15,298 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-11 23:43:15,309 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-11 23:47:29,296 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_START"
2024-11-11 23:47:57,953 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:48:15,388 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:48:32,912 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:48:50,522 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:49:08,039 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:49:23,639 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:49:39,229 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:49:54,856 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:50:10,491 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:50:26,155 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:50:41,911 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:50:57,728 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:51:13,434 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:51:28,978 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:51:44,654 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:52:00,243 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:52:15,676 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:52:31,502 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:52:47,114 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:53:02,718 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:53:18,220 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:53:34,031 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:53:49,647 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:54:05,322 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:54:21,008 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:54:36,523 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:54:52,033 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:55:07,565 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:55:23,412 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:55:39,103 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:55:54,786 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:56:10,195 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:56:25,810 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:56:41,414 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:56:57,047 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:57:12,667 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:57:28,301 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:57:44,257 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:57:59,804 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:58:15,543 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:58:31,081 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:58:46,747 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:59:02,533 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:59:18,094 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:59:33,832 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-11 23:59:49,466 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:00:05,107 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:00:20,681 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:00:36,320 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:00:51,965 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:01:07,561 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:01:23,258 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:01:38,734 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:01:54,466 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:02:09,972 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:02:25,503 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:02:41,283 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:02:56,890 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:03:12,464 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:03:28,003 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:03:43,608 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:03:59,235 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:04:14,839 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:04:30,478 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:04:46,115 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:05:01,908 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:05:17,582 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:05:33,358 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:05:49,024 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:06:04,388 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:06:20,172 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:06:35,730 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:06:51,376 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:07:07,046 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:07:22,433 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:07:38,262 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:07:53,895 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:08:08,667 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:08:27,213 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:08:44,842 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:09:02,350 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:09:19,973 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:09:37,484 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:09:58,213 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-11-12 00:10:00,662 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-12 00:10:00,663 [printer.py:change_state()] - Adding callback for state: ready
2024-11-12 00:10:00,686 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-11-12 00:10:31,169 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-12 00:10:31,170 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:10:31,172 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:10:31,172 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:10:31,176 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:10:31,245 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:10:34,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:10:34,416 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:10:34,433 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:10:34,434 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:10:34,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:10:34,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:10:34,489 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}, 'gcode_shell_command update_git_script': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh"', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_shell_command update_git_script_message': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh -c $0"', 'timeout': '90.0', 'verbose': 'True'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh"', 'timeout': 90.0, 'verbose': True}, 'gcode_shell_command update_git_script_message': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh -c $0"', 'timeout': 90.0, 'verbose': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:10:34,493 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:10:34,495 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:10:34,495 [printer.py:reinit()] - # Extruders: 1
2024-11-12 00:10:34,495 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 00:10:34,495 [printer.py:reinit()] - # Fans: 2
2024-11-12 00:10:34,496 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:10:34,496 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:10:34,496 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:10:34,527 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:10:34,530 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 00:10:34,809 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 00:10:34,809 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:10:34,810 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 00:10:34,810 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 00:10:35,228 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-11-12 00:10:35,228 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:10:35,232 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:10:35,299 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:12:00,330 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 00:12:00,330 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:12:00,332 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:12:00,332 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:12:00,336 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:12:00,411 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:12:03,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:12:03,419 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:12:03,438 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:12:03,439 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:12:03,439 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:12:03,461 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:12:03,495 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}, 'gcode_shell_command update_git_script': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh"', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_shell_command update_git_script_message': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh -c $0"', 'timeout': '90.0', 'verbose': 'True'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh"', 'timeout': 90.0, 'verbose': True}, 'gcode_shell_command update_git_script_message': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh -c $0"', 'timeout': 90.0, 'verbose': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:12:03,499 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:12:03,500 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:12:03,501 [printer.py:reinit()] - # Extruders: 1
2024-11-12 00:12:03,502 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 00:12:03,502 [printer.py:reinit()] - # Fans: 2
2024-11-12 00:12:03,502 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:12:03,502 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:12:03,502 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:12:03,530 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:12:03,532 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 00:12:03,806 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 00:12:03,807 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:12:03,807 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 00:12:03,808 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 00:12:04,490 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-11-12 00:12:04,491 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:12:04,498 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:12:04,573 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:12:13,366 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 00:12:13,367 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:12:13,369 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:12:13,369 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:12:13,372 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:12:13,439 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:12:16,400 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:12:16,418 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:12:16,435 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:12:16,436 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:12:16,436 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:12:16,456 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:12:16,489 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}, 'gcode_shell_command update_git_script': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh"', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_shell_command update_git_script_message': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh -c $0"', 'timeout': '90.0', 'verbose': 'True'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh"', 'timeout': 90.0, 'verbose': True}, 'gcode_shell_command update_git_script_message': {'command': 'bash -c "bash $HOME/klipper-backup/script.sh -c $0"', 'timeout': 90.0, 'verbose': True}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:12:16,492 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:12:16,493 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:12:16,494 [printer.py:reinit()] - # Extruders: 1
2024-11-12 00:12:16,494 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 00:12:16,494 [printer.py:reinit()] - # Fans: 2
2024-11-12 00:12:16,494 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:12:16,495 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:12:16,495 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:12:16,518 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:12:16,521 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 00:12:16,810 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 00:12:16,811 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:12:16,812 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 00:12:16,812 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 00:12:17,483 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-11-12 00:12:17,484 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:12:17,490 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:12:17,556 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:15:30,398 [screen.py:show_screensaver()] - Showing Screensaver
2024-11-12 00:18:52,652 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 00:18:52,653 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:18:52,655 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:18:52,655 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:18:52,656 [screen.py:close_screensaver()] - Closing Screensaver
2024-11-12 00:18:52,712 [screen.py:wake_screen()] - Screen wake up
2024-11-12 00:18:52,727 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:18:52,829 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:18:56,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:18:56,416 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:18:56,433 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:18:56,434 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:18:56,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:18:56,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:18:56,569 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:18:56,570 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:18:56,570 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:18:56,571 [printer.py:reinit()] - # Extruders: 0
2024-11-12 00:18:56,571 [printer.py:reinit()] - # Temperature devices: 0
2024-11-12 00:18:56,571 [printer.py:reinit()] - # Fans: 0
2024-11-12 00:18:56,571 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:18:56,571 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:18:56,572 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:18:56,594 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:18:56,596 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-12 00:18:56,827 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 00:18:56,828 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:18:56,828 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 00:18:56,829 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:18:56,834 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:18:56,921 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:19:39,132 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-11-12 00:19:39,134 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-11-12 00:19:39,135 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-11-12 00:19:39,141 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:19:39,299 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:19:39,397 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-11-12 00:19:39,400 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:19:39,471 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:19:39,491 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-12 00:19:39,491 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:19:39,503 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-11-12 00:19:49,400 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-12 00:19:49,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:19:49,437 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-11-12 00:19:49,470 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-11-12 00:19:49,491 [_logging.py:info()] - Websocket connected
2024-11-12 00:19:49,492 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-11-12 00:19:49,495 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:19:49,532 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:19:49,568 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:19:49,569 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:19:49,570 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:19:49,597 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:19:49,859 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:19:49,859 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:19:49,860 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:19:49,861 [printer.py:reinit()] - # Extruders: 0
2024-11-12 00:19:49,861 [printer.py:reinit()] - # Temperature devices: 0
2024-11-12 00:19:49,861 [printer.py:reinit()] - # Fans: 0
2024-11-12 00:19:49,862 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:19:49,862 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:19:49,862 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:19:49,888 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:19:49,890 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-12 00:19:50,113 [files.py:set_gcodes_path()] - Gcodes path: None
2024-11-12 00:19:50,114 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:19:50,114 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 00:19:50,115 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:19:50,120 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:19:50,186 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:20:23,318 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-11-12 00:20:23,319 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-11-12 00:20:23,319 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-11-12 00:20:23,323 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:20:23,401 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:20:23,500 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-11-12 00:20:23,502 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:20:23,577 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:20:23,599 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-12 00:20:23,600 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:20:23,611 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-11-12 00:20:33,398 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-12 00:20:33,399 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:20:33,419 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-11-12 00:20:33,436 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-11-12 00:20:33,447 [_logging.py:info()] - Websocket connected
2024-11-12 00:20:33,447 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-11-12 00:20:33,449 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:20:33,466 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:20:33,483 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:20:33,484 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:20:33,484 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:20:33,505 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:20:33,580 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:20:33,581 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:20:33,581 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:20:33,582 [printer.py:reinit()] - # Extruders: 0
2024-11-12 00:20:33,582 [printer.py:reinit()] - # Temperature devices: 0
2024-11-12 00:20:33,582 [printer.py:reinit()] - # Fans: 0
2024-11-12 00:20:33,582 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:20:33,582 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:20:33,583 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:20:33,605 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:20:33,607 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-12 00:20:33,839 [files.py:set_gcodes_path()] - Gcodes path: None
2024-11-12 00:20:33,840 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:20:33,840 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 00:20:33,840 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:20:33,844 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:20:33,910 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:23:03,449 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 00:23:03,449 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:23:03,450 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:23:03,451 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:23:03,455 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:23:03,579 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:23:06,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:23:06,424 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:23:06,441 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:23:06,442 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:23:06,442 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:23:06,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:23:06,633 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:23:06,634 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:23:06,634 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:23:06,635 [printer.py:reinit()] - # Extruders: 0
2024-11-12 00:23:06,635 [printer.py:reinit()] - # Temperature devices: 0
2024-11-12 00:23:06,635 [printer.py:reinit()] - # Fans: 0
2024-11-12 00:23:06,635 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:23:06,635 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:23:06,636 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:23:06,665 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:23:06,669 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-12 00:23:06,892 [files.py:set_gcodes_path()] - Gcodes path: None
2024-11-12 00:23:06,892 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:23:06,893 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 00:23:06,893 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:23:06,898 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:23:06,966 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:23:19,806 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 00:23:19,807 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:23:19,809 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:23:19,810 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:23:19,814 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:23:19,939 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:23:23,397 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:23:23,415 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:23:23,432 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:23:23,433 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:23:23,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:23:23,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:23:23,705 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:23:23,706 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:23:23,706 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:23:23,706 [printer.py:reinit()] - # Extruders: 0
2024-11-12 00:23:23,707 [printer.py:reinit()] - # Temperature devices: 0
2024-11-12 00:23:23,707 [printer.py:reinit()] - # Fans: 0
2024-11-12 00:23:23,707 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:23:23,707 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:23:23,707 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:23:23,729 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:23:23,732 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-12 00:23:23,964 [files.py:set_gcodes_path()] - Gcodes path: None
2024-11-12 00:23:23,965 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:23:23,965 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 00:23:23,965 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:23:23,970 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:23:24,061 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:24:06,788 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 00:24:06,788 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:24:06,790 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:24:06,790 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:24:06,795 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:24:06,871 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:24:10,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:24:10,418 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:24:10,438 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:24:10,439 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:24:10,439 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:24:10,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:24:10,561 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:24:10,562 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:24:10,562 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:24:10,563 [printer.py:reinit()] - # Extruders: 0
2024-11-12 00:24:10,563 [printer.py:reinit()] - # Temperature devices: 0
2024-11-12 00:24:10,563 [printer.py:reinit()] - # Fans: 0
2024-11-12 00:24:10,563 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:24:10,564 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:24:10,564 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:24:10,587 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:24:10,589 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-12 00:24:10,822 [files.py:set_gcodes_path()] - Gcodes path: None
2024-11-12 00:24:10,823 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:24:10,823 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 00:24:10,824 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:24:10,835 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:24:10,913 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:24:26,120 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 00:24:26,121 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:24:26,122 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:24:26,123 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:24:26,128 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:24:26,203 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:24:29,397 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:24:29,415 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:24:29,434 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:24:29,434 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:24:29,435 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:24:29,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:24:29,621 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:24:29,622 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:24:29,622 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:24:29,623 [printer.py:reinit()] - # Extruders: 0
2024-11-12 00:24:29,623 [printer.py:reinit()] - # Temperature devices: 0
2024-11-12 00:24:29,623 [printer.py:reinit()] - # Fans: 0
2024-11-12 00:24:29,623 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:24:29,623 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:24:29,624 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:24:29,647 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:24:29,649 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-11-12 00:24:29,882 [files.py:set_gcodes_path()] - Gcodes path: None
2024-11-12 00:24:29,883 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:24:29,884 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 00:24:29,884 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:24:29,890 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:24:29,959 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:24:57,032 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 00:24:57,033 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:24:57,035 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:24:57,036 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:24:57,040 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:24:57,116 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:25:00,400 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:25:00,428 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:25:00,455 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:25:00,455 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:25:00,456 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:25:00,485 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:25:00,523 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:25:00,526 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:25:00,527 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:25:00,528 [printer.py:reinit()] - # Extruders: 1
2024-11-12 00:25:00,528 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 00:25:00,529 [printer.py:reinit()] - # Fans: 2
2024-11-12 00:25:00,529 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:25:00,530 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:25:00,531 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:25:00,561 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:25:00,564 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 00:25:00,843 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 00:25:00,844 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:25:00,844 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 00:25:00,845 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 00:25:01,262 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-11-12 00:25:01,262 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 00:25:01,267 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:25:01,337 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:28:11,974 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 00:28:11,975 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:28:11,976 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:28:11,977 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:28:11,981 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:28:12,059 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:28:15,399 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:28:15,420 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:28:15,441 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:28:15,442 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:28:15,442 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:28:15,465 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:28:15,499 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.80', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.8, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:28:15,501 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:28:15,503 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:28:15,503 [printer.py:reinit()] - # Extruders: 1
2024-11-12 00:28:15,503 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 00:28:15,503 [printer.py:reinit()] - # Fans: 2
2024-11-12 00:28:15,504 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:28:15,504 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:28:15,504 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:28:15,531 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:28:15,534 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 00:28:15,801 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 00:28:15,801 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:28:15,803 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 00:28:15,803 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 00:28:16,494 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-12 00:28:16,494 [printer.py:change_state()] - Adding callback for state: ready
2024-11-12 00:28:16,498 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-12 00:28:16,503 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:28:16,630 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-12 00:28:16,644 [main_menu.py:add_device()] - Adding device: extruder
2024-11-12 00:28:16,655 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-12 00:28:16,666 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-12 00:28:16,744 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-12 00:28:16,748 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-12 00:28:16,776 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-11-12 00:28:16,778 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2024-11-12 00:28:22,399 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-12 00:28:22,475 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-12 00:28:22,479 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-12 00:28:22,500 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-12 00:29:04,760 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-12 00:29:04,760 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:29:04,761 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:29:04,762 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:29:04,765 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:29:04,844 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:29:08,397 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:29:08,421 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:29:08,441 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:29:08,441 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:29:08,442 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:29:08,465 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:29:08,496 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:29:08,499 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:29:08,501 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:29:08,501 [printer.py:reinit()] - # Extruders: 1
2024-11-12 00:29:08,501 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 00:29:08,502 [printer.py:reinit()] - # Fans: 2
2024-11-12 00:29:08,502 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:29:08,502 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:29:08,502 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:29:08,529 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:29:08,532 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 00:29:08,799 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 00:29:08,800 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:29:08,800 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 00:29:08,801 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 00:29:09,237 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-12 00:29:09,237 [printer.py:change_state()] - Adding callback for state: ready
2024-11-12 00:29:09,240 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-12 00:29:09,246 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:29:09,371 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-12 00:29:09,382 [main_menu.py:add_device()] - Adding device: extruder
2024-11-12 00:29:09,392 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-12 00:29:09,402 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-12 00:29:09,461 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-12 00:29:09,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-12 00:29:09,511 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-12 00:29:09,515 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-12 00:29:09,541 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-12 00:32:15,934 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-12 00:32:15,934 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 00:32:15,936 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 00:32:15,936 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:32:15,941 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:32:16,016 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 00:32:19,397 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 00:32:19,415 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 00:32:19,432 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 00:32:19,433 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 00:32:19,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 00:32:19,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 00:32:19,484 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '41', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '41', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 41.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 41.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 00:32:19,488 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 00:32:19,489 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 00:32:19,489 [printer.py:reinit()] - # Extruders: 1
2024-11-12 00:32:19,489 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 00:32:19,489 [printer.py:reinit()] - # Fans: 2
2024-11-12 00:32:19,489 [printer.py:reinit()] - # Output pins: 0
2024-11-12 00:32:19,490 [printer.py:reinit()] - # Leds: 0
2024-11-12 00:32:19,490 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 00:32:19,513 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 00:32:19,516 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 00:32:19,782 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 00:32:19,783 [screen.py:init_klipper()] - Printer initialized
2024-11-12 00:32:19,784 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 00:32:19,784 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 00:32:20,477 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-12 00:32:20,477 [printer.py:change_state()] - Adding callback for state: ready
2024-11-12 00:32:20,480 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-12 00:32:20,486 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:32:20,635 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-12 00:32:20,648 [main_menu.py:add_device()] - Adding device: extruder
2024-11-12 00:32:20,659 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-12 00:32:20,671 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-12 00:32:20,748 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-12 00:32:20,750 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-12 00:32:20,799 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-12 00:32:20,802 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-12 00:32:20,826 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-12 00:32:31,763 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-12 00:32:31,764 [printer.py:change_state()] - Adding callback for state: printing
2024-11-12 00:32:31,784 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 00:32:32,000 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-12 00:32:32,013 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-12 00:32:32,029 [job_status.py:update_file_metadata()] - Update Metadata. File: Forma-Caixa-4.42427-23m.gcode Size: 474746
2024-11-12 00:32:32,040 [job_status.py:show_file_thumbnail()] - Forma-Caixa-4.42427-23m.gcode
2024-11-12 01:03:03,236 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-11-12 01:03:03,236 [printer.py:change_state()] - Adding callback for state: ready
2024-11-12 01:03:03,275 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-11-12 01:16:46,521 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-12 01:16:46,522 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 01:16:46,526 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 01:16:46,527 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:16:46,531 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:16:46,620 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:16:49,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:16:49,425 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 01:16:49,447 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 01:16:49,448 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 01:16:49,448 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 01:16:49,473 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 01:16:49,509 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 01:16:49,514 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:16:49,515 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 01:16:49,516 [printer.py:reinit()] - # Extruders: 1
2024-11-12 01:16:49,516 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 01:16:49,516 [printer.py:reinit()] - # Fans: 2
2024-11-12 01:16:49,517 [printer.py:reinit()] - # Output pins: 0
2024-11-12 01:16:49,517 [printer.py:reinit()] - # Leds: 0
2024-11-12 01:16:49,517 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 01:16:49,579 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 01:16:49,582 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 01:16:49,829 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 01:16:49,830 [screen.py:init_klipper()] - Printer initialized
2024-11-12 01:16:49,830 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 01:16:49,831 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 01:16:51,009 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-11-12 01:16:51,010 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 01:16:51,013 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:16:51,088 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:17:01,612 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 01:17:01,613 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 01:17:01,615 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 01:17:01,616 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:17:01,620 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:17:01,728 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:17:05,398 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:17:05,416 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 01:17:05,433 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 01:17:05,434 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 01:17:05,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 01:17:05,456 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 01:17:05,491 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 01:17:05,494 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:17:05,495 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 01:17:05,495 [printer.py:reinit()] - # Extruders: 1
2024-11-12 01:17:05,495 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 01:17:05,496 [printer.py:reinit()] - # Fans: 2
2024-11-12 01:17:05,496 [printer.py:reinit()] - # Output pins: 0
2024-11-12 01:17:05,496 [printer.py:reinit()] - # Leds: 0
2024-11-12 01:17:05,496 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 01:17:05,520 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 01:17:05,522 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 01:17:05,854 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 01:17:05,855 [screen.py:init_klipper()] - Printer initialized
2024-11-12 01:17:05,855 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 01:17:05,856 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 01:17:05,899 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:17:05,993 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:17:14,056 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-11-12 01:17:14,058 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-11-12 01:17:14,058 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-11-12 01:17:14,063 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:17:14,161 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:17:14,266 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-11-12 01:17:14,269 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:17:14,348 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:17:14,368 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-12 01:17:14,369 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:17:14,380 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-11-12 01:17:24,400 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-12 01:17:24,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:17:24,438 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-11-12 01:17:24,473 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-11-12 01:17:24,493 [_logging.py:info()] - Websocket connected
2024-11-12 01:17:24,495 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-11-12 01:17:24,498 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:17:24,515 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 01:17:24,532 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 01:17:24,533 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 01:17:24,533 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 01:17:24,554 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 01:17:24,719 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 01:17:24,722 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:17:24,724 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d-dirty
2024-11-12 01:17:24,724 [printer.py:reinit()] - # Extruders: 1
2024-11-12 01:17:24,724 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 01:17:24,725 [printer.py:reinit()] - # Fans: 2
2024-11-12 01:17:24,725 [printer.py:reinit()] - # Output pins: 0
2024-11-12 01:17:24,725 [printer.py:reinit()] - # Leds: 0
2024-11-12 01:17:24,725 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 01:17:24,749 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 01:17:24,751 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 01:17:25,037 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 01:17:25,038 [screen.py:init_klipper()] - Printer initialized
2024-11-12 01:17:25,038 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 01:17:25,039 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 01:17:25,042 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:17:25,111 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:18:53,397 [screen.py:show_screensaver()] - Showing Screensaver
2024-11-12 01:20:47,914 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-11-12 01:20:47,916 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-11-12 01:20:47,917 [screen.py:close_screensaver()] - Closing Screensaver
2024-11-12 01:20:47,920 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-11-12 01:20:47,982 [screen.py:wake_screen()] - Screen wake up
2024-11-12 01:20:47,993 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:20:48,068 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:20:48,162 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-11-12 01:20:48,164 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:20:48,231 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:20:48,247 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-12 01:20:48,247 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:20:48,256 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-11-12 01:21:34,070 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-11-12 01:21:34,071 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a09
2024-11-12 01:21:34,072 [functions.py:log_start()] - Python version: 3.9
2024-11-12 01:21:35,235 [config.py:get_config_file_location()] - Passed config (-c): .
2024-11-12 01:21:35,240 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-11-12 01:21:35,257 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-11-12 01:21:35,408 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-11-12 01:21:35,409 [config.py:install_language()] - Using lang en
2024-11-12 01:21:35,448 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-11-12 01:21:35,454 [screen.py:__init__()] - Wayland: False Display name: :0
2024-11-12 01:21:35,462 [screen.py:__init__()] - Screen resolution: 1024x768
2024-11-12 01:21:35,467 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-11-12 01:21:38,917 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-11-12 01:21:38,934 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-11-12 01:21:38,946 [screen.py:initial_connection()] - Default printer: None
2024-11-12 01:21:39,039 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-11-12 01:21:39,040 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-11-12 01:21:39,132 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:21:39,152 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-12 01:21:39,153 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:21:39,196 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-11-12 01:21:39,219 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-11-12 01:21:39,239 [_logging.py:info()] - Websocket connected
2024-11-12 01:21:39,240 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-11-12 01:21:39,579 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:21:39,600 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 01:21:39,620 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 01:21:39,621 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 01:21:39,622 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 01:21:39,655 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 01:21:39,908 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 01:21:39,911 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:21:39,912 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d
2024-11-12 01:21:39,913 [printer.py:reinit()] - # Extruders: 1
2024-11-12 01:21:39,913 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 01:21:39,913 [printer.py:reinit()] - # Fans: 2
2024-11-12 01:21:39,913 [printer.py:reinit()] - # Output pins: 0
2024-11-12 01:21:39,914 [printer.py:reinit()] - # Leds: 0
2024-11-12 01:21:39,914 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 01:21:39,957 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 01:21:39,960 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 01:21:40,204 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 01:21:40,205 [screen.py:init_klipper()] - Printer initialized
2024-11-12 01:21:40,206 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 01:21:40,207 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 01:21:40,231 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:21:40,304 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:23:47,066 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 01:23:47,067 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 01:23:47,068 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 01:23:47,069 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:23:47,073 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:23:47,141 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:23:50,256 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:23:50,275 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 01:23:50,292 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 01:23:50,293 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 01:23:50,293 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 01:23:50,314 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 01:23:50,347 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}\n{% set verbose_enable = kamp_settings.verbose_enable | abs %}\n{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}\n{% set attach_macro = kamp_settings.attach_macro | string %}\n{% set detach_macro = kamp_settings.detach_macro | string %}\n{% set mesh_margin = kamp_settings.mesh_margin | float %}\n{% set fuzz_amount = kamp_settings.fuzz_amount | float %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}\n{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}\n{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}\n{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}\n\n{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}\n{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}\n{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}\n{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}\n\n{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n\n{% set points_x = [points_x , min_points]|max %}\n{% set points_y = [points_y , min_points]|max %}\n{% set points_x = [points_x , probe_count[0]]|min %}\n{% set points_y = [points_y , probe_count[1]]|min %}\n\n{% if verbose_enable == True %}\n{% if printer.exclude_object.objects != [] %}\n\n{ action_respond_info( "Algorithm: {}.".format(\n(algorithm),\n)) }\n\n{ action_respond_info("Default probe count: {},{}.".format(\n(probe_count[0]),\n(probe_count[1]),\n)) }\n\n{ action_respond_info("Adapted probe count: {},{}.".format(\n(points_x),\n(points_y),\n)) }\n\n{action_respond_info("Default mesh bounds: {}, {}.".format(\n(bed_mesh_min[0],bed_mesh_min[1]),\n(bed_mesh_max[0],bed_mesh_max[1]),\n)) }\n\n{% if mesh_margin > 0 %}\n{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(\n(mesh_margin),\n(mesh_margin),\n)) }\n{% else %}\n{action_respond_info("Mesh margin is 0, margin not increased.")}\n{% endif %}\n\n{% if fuzz_amount > 0 %}\n{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(\n(fuzz_amount),\n)) }\n{% else %}\n{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}\n{% endif %}\n\n{ action_respond_info("Adapted mesh bounds: {}, {}.".format(\n(adapted_x_min, adapted_y_min),\n(adapted_x_max, adapted_y_max),\n)) }\n\n{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}\n\n{% else %}\n\n{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}\nG4 P5000\n{% endif %}\n\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 01:23:50,351 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:23:50,352 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d
2024-11-12 01:23:50,353 [printer.py:reinit()] - # Extruders: 1
2024-11-12 01:23:50,353 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 01:23:50,353 [printer.py:reinit()] - # Fans: 2
2024-11-12 01:23:50,354 [printer.py:reinit()] - # Output pins: 0
2024-11-12 01:23:50,354 [printer.py:reinit()] - # Leds: 0
2024-11-12 01:23:50,355 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 01:23:50,384 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 01:23:50,386 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 01:23:50,696 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 01:23:50,697 [screen.py:init_klipper()] - Printer initialized
2024-11-12 01:23:50,698 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 01:23:50,698 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 01:23:51,113 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-11-12 01:23:51,114 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 01:23:51,117 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:23:51,192 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:26:07,423 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 01:26:07,424 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 01:26:07,425 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 01:26:07,425 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:26:07,430 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:26:07,548 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:26:11,256 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:26:11,275 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 01:26:11,292 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 01:26:11,292 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 01:26:11,293 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 01:26:11,314 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 01:26:11,345 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 01:26:11,349 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:26:11,350 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d
2024-11-12 01:26:11,350 [printer.py:reinit()] - # Extruders: 1
2024-11-12 01:26:11,351 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 01:26:11,351 [printer.py:reinit()] - # Fans: 2
2024-11-12 01:26:11,352 [printer.py:reinit()] - # Output pins: 0
2024-11-12 01:26:11,352 [printer.py:reinit()] - # Leds: 0
2024-11-12 01:26:11,353 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 01:26:11,382 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 01:26:11,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 01:26:11,668 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 01:26:11,668 [screen.py:init_klipper()] - Printer initialized
2024-11-12 01:26:11,669 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 01:26:11,669 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 01:26:11,675 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:26:11,742 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:26:38,518 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 01:26:38,519 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 01:26:38,520 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 01:26:38,521 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:26:38,523 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:26:38,589 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:26:42,256 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:26:42,275 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 01:26:42,294 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 01:26:42,294 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 01:26:42,295 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 01:26:42,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 01:26:42,353 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 01:26:42,356 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:26:42,358 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d
2024-11-12 01:26:42,358 [printer.py:reinit()] - # Extruders: 1
2024-11-12 01:26:42,358 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 01:26:42,358 [printer.py:reinit()] - # Fans: 2
2024-11-12 01:26:42,358 [printer.py:reinit()] - # Output pins: 0
2024-11-12 01:26:42,359 [printer.py:reinit()] - # Leds: 0
2024-11-12 01:26:42,359 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 01:26:42,387 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 01:26:42,389 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 01:26:42,678 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 01:26:42,679 [screen.py:init_klipper()] - Printer initialized
2024-11-12 01:26:42,679 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 01:26:42,680 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 01:26:42,848 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-11-12 01:26:42,848 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 01:26:42,853 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:26:42,921 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:33:47,499 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 01:33:47,499 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 01:33:47,500 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 01:33:47,501 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:33:47,503 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:33:47,584 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:33:51,256 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:33:51,279 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 01:33:51,301 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 01:33:51,302 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 01:33:51,302 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 01:33:51,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 01:33:51,364 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 01:33:51,368 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:33:51,369 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d
2024-11-12 01:33:51,370 [printer.py:reinit()] - # Extruders: 1
2024-11-12 01:33:51,370 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 01:33:51,370 [printer.py:reinit()] - # Fans: 2
2024-11-12 01:33:51,371 [printer.py:reinit()] - # Output pins: 0
2024-11-12 01:33:51,371 [printer.py:reinit()] - # Leds: 0
2024-11-12 01:33:51,371 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 01:33:51,401 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 01:33:51,407 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 01:33:51,677 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 01:33:51,678 [screen.py:init_klipper()] - Printer initialized
2024-11-12 01:33:51,679 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-12 01:33:51,679 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 01:33:51,683 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:33:51,750 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:33:55,325 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-12 01:33:55,326 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-12 01:33:55,330 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-12 01:33:55,331 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:33:55,334 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:33:55,410 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-12 01:33:58,256 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-12 01:33:58,275 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-12 01:33:58,293 [printer.py:configure_cameras()] - Cameras: []
2024-11-12 01:33:58,293 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-324-ga3e4dac', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-12 01:33:58,294 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-12 01:33:58,315 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-12 01:33:58,346 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': '!PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': '!PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.3', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.200'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.550', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': '!PB2', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': '!PB9', 'rotation_distance': 39.3, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.55, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.2, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\nTURN_OFF_HEATERS\nM107\nG90\nG0 X60 Y{max_y-10} F3600', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-12 01:33:58,350 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-12 01:33:58,351 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d
2024-11-12 01:33:58,351 [printer.py:reinit()] - # Extruders: 1
2024-11-12 01:33:58,351 [printer.py:reinit()] - # Temperature devices: 2
2024-11-12 01:33:58,352 [printer.py:reinit()] - # Fans: 2
2024-11-12 01:33:58,352 [printer.py:reinit()] - # Output pins: 0
2024-11-12 01:33:58,352 [printer.py:reinit()] - # Leds: 0
2024-11-12 01:33:58,352 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-12 01:33:58,382 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-12 01:33:58,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-12 01:33:58,644 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-12 01:33:58,644 [screen.py:init_klipper()] - Printer initialized
2024-11-12 01:33:58,645 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-12 01:33:58,646 [printer.py:change_state()] - Adding callback for state: startup
2024-11-12 01:33:59,397 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-11-12 01:33:59,397 [printer.py:change_state()] - Adding callback for state: error
2024-11-12 01:33:59,401 [screen.py:show_panel()] - Reinitializing panel
2024-11-12 01:33:59,473 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
