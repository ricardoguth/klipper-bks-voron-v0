2024-11-15 05:17:47,297 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}'}, 'gcode_macro _KAMP_Settings': {'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10', 'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'restart_method': 'command'}, 'exclude_object': {}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '4000', 'max_z_velocity': '15', 'max_z_accel': '45', 'square_corner_velocity': '6.0'}, 'stepper_x': {'step_pin': 'PC0', 'dir_pin': 'PB2', 'enable_pin': '!PC13', 'rotation_distance': '39.6', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'diag_pin': 'PA12', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_y': {'step_pin': 'PC2', 'dir_pin': 'PB9', 'enable_pin': '!PB12', 'rotation_distance': '39.6', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': '120', 'position_max': '120', 'homing_speed': '40', 'homing_retract_dist': '0', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'diag_pin': 'PA11', 'run_current': '0.600', 'stealthchop_threshold': '999999', 'driver_sgthrs': '100'}, 'stepper_z': {'step_pin': 'PB7', 'dir_pin': '!PB6', 'enable_pin': '!PB8', 'rotation_distance': '8', 'microsteps': '32', 'endstop_pin': '^PC6', 'position_max': '120', 'position_min': '-1.5', 'homing_speed': '20', 'second_homing_speed': '3.0', 'homing_retract_dist': '3.0', 'position_endstop': '118.275'}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'run_current': '0.350', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PB4', 'dir_pin': '!PB3', 'enable_pin': '!PB5', 'rotation_distance': '22.23', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA0', 'control': 'pid', 'pid_kp': '42.659', 'pid_ki': '9.480', 'pid_kd': '47.992', 'min_temp': '0', 'max_temp': '270', 'min_extrude_temp': '220'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'run_current': '0.400', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PC8', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA1', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '56.096', 'pid_ki': '2.493', 'pid_kd': '315.541'}, 'bed_mesh': {'mesh_min': '30, 30', 'mesh_max': '100, 100', 'speed': '150', 'horizontal_move_z': '2', 'probe_count': '3,3', 'algorithm': 'bicubic', 'zero_reference_position': '60, 60'}, 'temperature_fan tcb1': {'pin': 'CB1:gpio211', 'kick_start_time': '0.8', 'off_below': '0.1', 'max_power': '1.0', 'sensor_type': 'temperature_host', 'control': 'pid', 'min_temp': '0', 'max_temp': '85', 'pid_kp': '1.0', 'pid_ki': '0.5', 'pid_kd': '2.0', 'min_speed': '0.1', 'max_speed': '0.6', 'target_temp': '38'}, 'heater_fan hotend_fan': {'pin': 'PA13', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan': {'pin': 'PA8', 'max_power': '1.0', 'kick_start_time': '0.5', 'cycle_time': '0.010'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC3, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,\nEXP1_2=PC1, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>,\n\nCR_EXP3_10=<5V>, CR_EXP3_8=PA4, CR_EXP3_6=PA6, CR_EXP3_4=<RST>, CR_EXP3_2=PC3,\nCR_EXP3_9=<GND>, CR_EXP3_7=PA5, CR_EXP3_5=PB0, CR_EXP3_3=PB11,  CR_EXP3_1=PC1'}, 'idle_timeout': {'timeout': '1800'}, 'homing_override': {'axes': 'xyz', 'set_position_z': '0', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': '60,5', 'screw1_name': 'front screw', 'screw2': '5,115', 'screw2_name': 'back left', 'screw3': '115,115', 'screw3_name': 'back right'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nTURN_OFF_HEATERS\nM107\nG90\nG0 X{max_x-10} Y{max_y-10} F36'}, 'gcode_macro SAFE_HOME': {'gcode': '\nG0 X60 Y60 Z30'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro _HOME_X': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}"}, 'gcode_macro _HOME_Z': {'gcode': '\nG90\nG28 Z\nG1 Z30'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/biqu/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n{% if params.AREA_START and params.AREA_END %}\n{% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}\n{% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n{% set area_min_x = params.AREA_START.split(",")[0]|float %}\n{% set area_min_y = params.AREA_START.split(",")[1]|float %}\n{% set area_max_x = params.AREA_END.split(",")[0]|float %}\n{% set area_max_y = params.AREA_END.split(",")[1]|float %}\n\n{% if bedMeshConfig.probe_count.split(",")|length == 2 %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}\n{% else %}\n{% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}\n{% endif %}\n\n{% set meshMaxPointX = meshPointX %}\n{% set meshMaxPointY = meshPointY %}\n\n\n{% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}\n{% if area_min_x - mesh_area_offset >=  safe_min_x %}\n{% set area_min_x = area_min_x - mesh_area_offset %}\n{% else %}\n{% set area_min_x = safe_min_x %}\n{% endif %}\n\n{% if area_min_y - mesh_area_offset >=  safe_min_y %}\n{% set area_min_y = area_min_y - mesh_area_offset %}\n{% else %}\n{% set area_min_y = safe_min_y %}\n{% endif %}\n\n{% if area_max_x + mesh_area_offset <=  safe_max_x %}\n{% set area_max_x = area_max_x + mesh_area_offset %}\n{% else %}\n{% set area_max_x = safe_max_x %}\n{% endif %}\n\n{% if area_max_y + mesh_area_offset <=  safe_max_y %}\n{% set area_max_y = area_max_y + mesh_area_offset %}\n{% else %}\n{% set area_max_y = safe_max_y %}\n{% endif %}\n\n{% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}\n{% if meshPointX < min_probe_count %}\n{% set meshPointX = min_probe_count %}\n{% endif %}\n{% if meshPointX > meshMaxPointX %}\n{% set meshPointX = meshMaxPointX %}\n{% endif %}\n\n{% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}\n{% if meshPointY < min_probe_count %}\n{% set meshPointY = min_probe_count %}\n{% endif %}\n{% if meshPointY > meshMaxPointY %}\n{% set meshPointY = meshMaxPointY %}\n{% endif %}\n\n{% set algorithm = "bicubic" %}\n{% if "algorithm" in bedMeshConfig %}\n{% set algorithm = bedMeshConfig.algorithm %}\n{% endif %}\n{% if meshPointX >=7 or meshPointY >=7 %}\n{% set algorithm = "bicubic" %}\n{% endif %}\n\n{% if enable_reference_index %}\n{% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}\n{% else %}\nBED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}\n{% else %}\nBED_MESH_CALIBRATE_BASE\n{% endif %}', 'rename_existing': 'BED_MESH_CALIBRATE_BASE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'variable_parameter_area_start': '0,0', 'variable_parameter_area_end': '0,0', 'variable_mesh_area_offset': '5.0', 'variable_probe_samples': '2', 'variable_min_probe_count': '4', 'variable_probe_count_scale_factor': '1.0', 'variable_enable_reference_index': 'False'}, 'gcode_macro line_purge': {'gcode': '\n\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}\n\n\n{% if printer.firmware_retraction is defined %}\n{% set RETRACT = G10 | string %}\n{% set UNRETRACT = G11 | string %}\n{% else %}\n{% set RETRACT = \'G1 E-.5 F2100\' | string %}\n{% set UNRETRACT = \'G1 E.5 F2100\' | string %}\n{% endif %}\n\n\n{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}\n{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}\n{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}\n{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}\n{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}\n{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}\n\n\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}\n{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}\n{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}\n{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}\n\n{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}\n{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}\n\n{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}\n{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}\n\n\n{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}\n\n{% if cross_section < 5 %}\n\n{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}\n\n{% else %}\n\n{% if verbose_enable == True %}\n\n{action_respond_info("Moving filament tip {}mms".format(\n(tip_distance),\n)) }\n{% endif %}\n\n{% if printer.firmware_retraction is defined %}\n{action_respond_info("KAMP purge is using firmware retraction.")}\n{% else %}\n{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}\n{% endif %}\n\n{% if purge_y_origin > 0 %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_center),\n(purge_y_origin),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% else %}\n\n{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(\n(purge_x_origin),\n(purge_y_center),\n(purge_amount),\n(flow_rate),\n)) }\n\n{% endif %}\n\nSAVE_GCODE_STATE NAME=Prepurge_State\n\n{% if purge_y_origin > 0 %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_center} Y{purge_y_origin}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 X{purge_x_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% else %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{purge_x_origin} Y{purge_y_center}\nG0 Z{purge_height}\nM83\nG1 E{tip_distance} F{purge_move_speed}\nG1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}\n{RETRACT}\nG0 Y{purge_y_center + purge_amount + 10} F{travel_speed}\nG92 E0\nM82\nG0 Z{purge_height * 2} F{travel_speed}\n\n{% endif %}\n\nRESTORE_GCODE_STATE NAME=Prepurge_State\n\n{% endif %}', 'description': 'A purge macro that adapts to be near your actual printed objects'}, 'gcode_macro _kamp_settings': {'gcode': '\n\n{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}', 'description': 'This macro contains all adjustable settings for KAMP', 'variable_verbose_enable': 'True', 'variable_mesh_margin': '0', 'variable_fuzz_amount': '0', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_purge_height': '0.8', 'variable_tip_distance': '0', 'variable_purge_margin': '10', 'variable_purge_amount': '30', 'variable_flow_rate': '12', 'variable_smart_park_height': '10'}, 'tmc2209 stepper_x': {'uart_pin': 'PC7', 'uart_address': 0, 'diag_pin': 'PA12', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PC0', 'dir_pin': 'PB2', 'rotation_distance': 39.6, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC13', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD2', 'uart_address': 0, 'diag_pin': 'PA11', 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 100}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PC2', 'dir_pin': 'PB9', 'rotation_distance': 39.6, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB12', 'endstop_pin': 'tmc2209_stepper_y:virtual_endstop', 'position_endstop': 120.0, 'position_min': 0.0, 'position_max': 120.0, 'homing_speed': 40.0, 'second_homing_speed': 20.0, 'homing_retract_speed': 40.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC12', 'uart_address': 0, 'run_current': 0.35, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PB7', 'dir_pin': '!PB6', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB8', 'endstop_pin': '^PC6', 'position_endstop': 118.275, 'position_min': -1.5, 'position_max': 120.0, 'homing_speed': 20.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 20.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': True}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'uart_address': 0, 'run_current': 0.4, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 270.0, 'min_extrude_temp': 220.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 42.659, 'pid_ki': 9.48, 'pid_kd': 47.992, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 1064.324321476577, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB4', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB3', 'rotation_distance': 22.23, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PB5'}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 56.096, 'pid_ki': 2.493, 'pid_kd': 315.541, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'zero_reference_position': [60.0, 60.0], 'probe_count': [3, 3], 'mesh_min': [30.0, 30.0], 'mesh_max': [100.0, 100.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 2.0, 'speed': 150.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'temperature_fan tcb1': {'max_power': 1.0, 'kick_start_time': 0.8, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'CB1:gpio211', 'min_temp': 0.0, 'max_temp': 85.0, 'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'max_speed': 0.6, 'min_speed': 0.1, 'target_temp': 38.0, 'control': 'pid', 'pid_kp': 1.0, 'pid_ki': 0.5, 'pid_kd': 2.0, 'pid_deriv_time': 2.0}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA13', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC3'], ['EXP1_3', 'PA4'], ['EXP1_5', 'PA6'], ['EXP1_7', 'PC4'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PC1'], ['EXP1_4', 'PA5'], ['EXP1_6', 'PA7'], ['EXP1_8', 'PC5'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB11'], ['EXP2_5', 'PB0'], ['EXP2_7', 'PC10'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PA15'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>'], ['CR_EXP3_10', '<5V>'], ['CR_EXP3_8', 'PA4'], ['CR_EXP3_6', 'PA6'], ['CR_EXP3_4', '<RST>'], ['CR_EXP3_2', 'PC3'], ['CR_EXP3_9', '<GND>'], ['CR_EXP3_7', 'PA5'], ['CR_EXP3_5', 'PB0'], ['CR_EXP3_3', 'PB11'], ['CR_EXP3_1', 'PC1']]}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'homing_override': {'set_position_z': 0.0, 'axes': 'xyz', 'gcode': "\nG90\nG0 Z5 F600\n{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}\n\n{% if home_all or 'X' in params %}\n_HOME_X\n{% endif %}\n\n{% if home_all or 'Y' in params %}\n_HOME_Y\n{% endif %}\n\n{% if home_all or 'Z' in params %}\n_HOME_Z\n{% endif %}"}, 'bed_screws': {'screw1': [60.0, 5.0], 'screw1_name': 'front screw', 'screw2': [5.0, 115.0], 'screw2_name': 'back left', 'screw3': [115.0, 115.0], 'screw3_name': 'back right', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'gcode_macro print_start': {'gcode': '\n\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}\n\nM140 S{BED_TEMP}\nM104 S{EXTRUDER_TEMP}\n\n\nG28\nG90\nG1 Z20 F3000\n\nM190 S{BED_TEMP}\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\n\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 20) %}\n{% set x_safe = 20.0 %}\n{% else %}\n{% set x_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 20) %}\n{% set y_safe = 20.0 %}\n{% else %}\n{% set y_safe = -20.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 2.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\nG0 Z{z_safe} F3600\nG0 X{x_safe} Y{y_safe} F20000\n\nTURN_OFF_HEATERS\nM107\nG90\nG0 X{max_x-10} Y{max_y-10} F36', 'description': 'G-Code macro'}, 'gcode_macro safe_home': {'gcode': '\nG0 X60 Y60 Z30', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro _home_x': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 X\n\nG91\nG1 X-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_y': {'gcode': "\n\n{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}\n{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}\n{% set HOME_CURRENT_RATIO = 0.7 %}\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}\n\n\nG28 Y\n\nG91\nG1 Y-10 F1200\n\n\nM400\nG90\n\nSET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}\nSET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}", 'description': 'G-Code macro'}, 'gcode_macro _home_z': {'gcode': '\nG90\nG28 Z\nG1 Z30', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\n{% set message = params.MESSAGE|default() %}\n{% if message %}\nRUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="\'{params.MESSAGE}\'"\n{% else %}\nRUN_SHELL_COMMAND CMD=update_git_script\n{% endif %}', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 4000.0, 'square_corner_velocity': 6.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 45.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-11-15 05:17:47,300 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-15 05:17:47,301 [printer.py:reinit()] - Klipper version: v0.12.0-125-gbfb71bc2d
2024-11-15 05:17:47,301 [printer.py:reinit()] - # Extruders: 1
2024-11-15 05:17:47,302 [printer.py:reinit()] - # Temperature devices: 2
2024-11-15 05:17:47,302 [printer.py:reinit()] - # Fans: 2
2024-11-15 05:17:47,302 [printer.py:reinit()] - # Output pins: 0
2024-11-15 05:17:47,302 [printer.py:reinit()] - # Leds: 0
2024-11-15 05:17:47,303 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-15 05:17:47,312 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-11-15 05:17:47,313 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a09
2024-11-15 05:17:47,313 [functions.py:log_start()] - Python version: 3.9
2024-11-15 05:17:47,332 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-15 05:17:47,335 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan hotend_fan&temperature_fan tcb1
2024-11-15 05:17:47,594 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-15 05:17:47,595 [screen.py:init_klipper()] - Printer initialized
2024-11-15 05:17:47,595 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-15 05:17:47,596 [printer.py:change_state()] - Adding callback for state: ready
2024-11-15 05:17:47,615 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-15 05:17:47,626 [screen.py:_load_panel()] - Loading panel: main_menu
2024-11-15 05:17:47,976 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-15 05:17:47,996 [main_menu.py:add_device()] - Adding device: extruder
2024-11-15 05:17:48,013 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-15 05:17:48,027 [main_menu.py:add_device()] - Adding device: temperature_fan tcb1
2024-11-15 05:17:48,100 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-15 05:17:48,104 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-15 05:17:48,165 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_fan tcb1', 'extruder']
2024-11-15 05:17:48,171 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-15 05:17:48,209 [screen.py:init_tempstore()] - Temperature store size: 1200
